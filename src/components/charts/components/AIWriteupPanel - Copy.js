import React, { useState, useEffect, useRef } from 'react';

// Placeholder async backend API functions
async function fetchWriteup(periodKey, division) {
  // TODO: Replace with real API call
  return null;
}
async function saveWriteup(periodKey, division, text) {
  // TODO: Replace with real API call
  return true;
}

function getPeriodKey(selectedPeriods) {
  return selectedPeriods.map(p => `${p.year}-${p.month || 'Year'}-${p.type}`).join('|');
}

const AIWriteupPanel = ({ tableData, selectedPeriods, basePeriod, division, chatContext, computeCellValue }) => {
  const [writeup, setWriteup] = useState('');
  const [loading, setLoading] = useState(false);
  const [editing, setEditing] = useState(false);
  const [error, setError] = useState(null);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [generationCount, setGenerationCount] = useState(0);
  
  // New chat interface states
  const [chatMessages, setChatMessages] = useState([]);
  const [currentPrompt, setCurrentPrompt] = useState('');
  const [selectedText, setSelectedText] = useState('');
  const [showChat, setShowChat] = useState(false);
  const [chatLoading, setChatLoading] = useState(false);
  
  // Store current financial data for AI responses
  const [currentFinancialData, setCurrentFinancialData] = useState(null);
  
  // Learning system states
  const [userPreferences, setUserPreferences] = useState({});
  const [showPreferences, setShowPreferences] = useState(false);
  
  const writeupRef = useRef(null);
  const chatInputRef = useRef(null);

  const periodKey = getPeriodKey(selectedPeriods);

  // Hardcoded worldwide norms for each division
  const divisionNorms = {
    FP: {
      marginOverMaterial: 18, // %
      grossProfit: 15, // %
      netProfit: 7, // %
      ebitda: 12 // %
    },
    SB: {
      marginOverMaterial: 14,
      grossProfit: 12,
      netProfit: 5,
      ebitda: 9
    },
    TF: {
      marginOverMaterial: 16,
      grossProfit: 13,
      netProfit: 6,
      ebitda: 10
    },
    HCM: {
      marginOverMaterial: 20,
      grossProfit: 17,
      netProfit: 8,
      ebitda: 13
    }
  };

  // Division full names
  const divisionNames = {
    FP: 'Flexible Packaging Division',
    SB: 'Shopping Bags Division',
    TF: 'Thermoforming Products Division',
    HCM: 'Preforms and Closures Division'
  };

  // Load saved preferences on component mount
  useEffect(() => {
    const savedPreferences = localStorage.getItem(`aiWriteupPreferences_${division}`);
    if (savedPreferences) {
      try {
        const preferences = JSON.parse(savedPreferences);
        setUserPreferences(preferences);
        console.log('Loaded user preferences:', preferences);
      } catch (err) {
        console.warn('Failed to load preferences:', err);
      }
    }
  }, [division]);

  // Save preferences to localStorage whenever they change
  useEffect(() => {
    if (Object.keys(userPreferences).length > 0) {
      localStorage.setItem(`aiWriteupPreferences_${division}`, JSON.stringify(userPreferences));
      console.log('Saved user preferences:', userPreferences);
    }
  }, [userPreferences, division]);

  // Detect and save user preferences from chat messages
  const detectAndSavePreferences = (userMessage) => {
    const lowerMessage = userMessage.toLowerCase();
    const newPreferences = { ...userPreferences };
    let preferencesDetected = [];
    
    // Detect exclusion preferences
    if (lowerMessage.includes("don't mention") || lowerMessage.includes("exclude") || lowerMessage.includes("remove")) {
      if (lowerMessage.includes("market positioning") || lowerMessage.includes("market data")) {
        newPreferences.excludeMarketPositioning = true;
        preferencesDetected.push("Exclude market positioning and market data");
      }
      if (lowerMessage.includes("industry benchmark") || lowerMessage.includes("industry comparison")) {
        newPreferences.excludeIndustryBenchmarks = true;
        preferencesDetected.push("Exclude industry benchmarks and comparisons");
      }
      if (lowerMessage.includes("strategy") || lowerMessage.includes("strategic")) {
        newPreferences.excludeStrategy = true;
        preferencesDetected.push("Exclude strategic recommendations");
      }
      if (lowerMessage.includes("growth") || lowerMessage.includes("expansion")) {
        newPreferences.excludeGrowth = true;
        preferencesDetected.push("Exclude growth analysis");
      }
    }
    
    // Detect inclusion preferences
    if (lowerMessage.includes("always include") || lowerMessage.includes("always add") || lowerMessage.includes("focus on")) {
      if (lowerMessage.includes("cost") || lowerMessage.includes("expense")) {
        newPreferences.focusOnCosts = true;
        preferencesDetected.push("Focus on cost analysis");
      }
      if (lowerMessage.includes("margin") || lowerMessage.includes("profitability")) {
        newPreferences.focusOnMargins = true;
        preferencesDetected.push("Focus on margin analysis");
      }
      if (lowerMessage.includes("efficiency") || lowerMessage.includes("operational")) {
        newPreferences.focusOnEfficiency = true;
        preferencesDetected.push("Focus on operational efficiency");
      }
    }
    
    // Detect format preferences
    if (lowerMessage.includes("short") || lowerMessage.includes("brief") || lowerMessage.includes("concise")) {
      newPreferences.preferShortFormat = true;
      preferencesDetected.push("Prefer short, concise format");
    }
    if (lowerMessage.includes("detailed") || lowerMessage.includes("comprehensive") || lowerMessage.includes("thorough")) {
      newPreferences.preferDetailedFormat = true;
      preferencesDetected.push("Prefer detailed, comprehensive format");
    }
    
    // Detect unit preferences
    if (lowerMessage.includes("use mt") || lowerMessage.includes("metric tons")) {
      newPreferences.preferMT = true;
      preferencesDetected.push("Use MT for volume units");
    }
    if (lowerMessage.includes("thousands") || lowerMessage.includes("use k")) {
      newPreferences.preferThousands = true;
      preferencesDetected.push("Use thousands (K) for currency");
    }
    
    // Save new preferences if any were detected
    if (preferencesDetected.length > 0) {
      setUserPreferences(newPreferences);
      return preferencesDetected;
    }
    
    return [];
  };

  // Apply user preferences to generated content
  const applyUserPreferences = (content) => {
    let modifiedContent = content;
    
    // Apply exclusion preferences
    if (userPreferences.excludeMarketPositioning) {
      // Remove market positioning references
      modifiedContent = modifiedContent.replace(/• Market positioning:.*?\n/g, '');
      modifiedContent = modifiedContent.replace(/\*\*Market Position.*?\n\n/gs, '');
    }
    
    if (userPreferences.excludeIndustryBenchmarks) {
      // Remove industry benchmark references
      modifiedContent = modifiedContent.replace(/• Industry comparison:.*?\n/g, '');
      modifiedContent = modifiedContent.replace(/Industry norm:.*?\)/g, ')');
      modifiedContent = modifiedContent.replace(/vs Industry norm.*?\n/g, '\n');
    }
    
    if (userPreferences.excludeStrategy) {
      // Remove strategic recommendations
      modifiedContent = modifiedContent.replace(/\*\*STRATEGIC RECOMMENDATIONS\*\*.*?(?=\*\*|$)/gs, '');
    }
    
    if (userPreferences.excludeGrowth) {
      // Remove growth analysis
      modifiedContent = modifiedContent.replace(/\*\*.*?GROWTH.*?\*\*.*?(?=\*\*|$)/gs, '');
    }
    
    // Apply unit preferences
    if (userPreferences.preferMT) {
      modifiedContent = modifiedContent.replace(/k tons?/g, 'MT');
    }
    
    if (userPreferences.preferThousands) {
      modifiedContent = modifiedContent.replace(/(\d+\.?\d*)\s*M\b/g, (match, number) => `${(parseFloat(number) * 1000).toFixed(0)}K`);
    }
    
    return modifiedContent;
  };

  // Enhanced generation function that applies learned preferences
  async function generateDetailedWriteup() {
    if (loading) {
      console.log('Generation already in progress, ignoring call');
      return;
    }
    
    console.log('Starting detailed writeup generation with user preferences:', userPreferences);
    setLoading(true);
    setError(null);
    
    const timeoutId = setTimeout(() => {
      console.warn('Generation timeout - forcing loading state reset');
      setLoading(false);
      setError('Generation timed out. Please try again.');
    }, 30000);
    
    try {
      // Helper to get KPI value with better error handling
      function getKPI(rowIndex, period) {
        if (!period || !computeCellValue) return 0;
        try {
          const value = computeCellValue(rowIndex, period);
          return typeof value === 'number' && !isNaN(value) ? value : 0;
        } catch (err) {
          console.error(`Error getting KPI for row ${rowIndex}:`, err);
          return 0;
        }
      }
      
      // Validate required data
      if (!basePeriod || !selectedPeriods || selectedPeriods.length === 0) {
        throw new Error('Missing required period data');
      }
      
      // Row indices for key KPIs
      const ROWS = {
        sales: 3,
        material: 5,
        grossProfit: 4,
        mfgExpenses: 14,
        belowGP: 52,
        netProfit: 54,
        ebitda: 56,
        salesVolume: 7
      };
      
      // Get comprehensive data for base period
      const basePeriodName = `${basePeriod.year} ${basePeriod.isCustomRange ? basePeriod.displayName : (basePeriod.month || '')} ${basePeriod.type}`.trim();
      const baseData = {
        sales: getKPI(ROWS.sales, basePeriod),
        material: getKPI(ROWS.material, basePeriod),
        grossProfit: getKPI(ROWS.grossProfit, basePeriod),
        mfgExpenses: getKPI(ROWS.mfgExpenses, basePeriod),
        belowGP: getKPI(ROWS.belowGP, basePeriod),
        netProfit: getKPI(ROWS.netProfit, basePeriod),
        ebitda: getKPI(ROWS.ebitda, basePeriod),
        salesVolume: getKPI(ROWS.salesVolume, basePeriod)
      };
      
      // Store financial data for AI responses
      setCurrentFinancialData(baseData);
      
      // Calculate comprehensive metrics
      const metrics = {
        // Basic margins
        grossMargin: baseData.sales > 0 ? (baseData.grossProfit / baseData.sales) * 100 : 0,
        netMargin: baseData.sales > 0 ? (baseData.netProfit / baseData.sales) * 100 : 0,
        ebitdaMargin: baseData.sales > 0 ? (baseData.ebitda / baseData.sales) * 100 : 0,
        materialRatio: baseData.sales > 0 ? (baseData.material / baseData.sales) * 100 : 0,
        mfgRatio: baseData.sales > 0 ? (baseData.mfgExpenses / baseData.sales) * 100 : 0,
        belowGPRatio: baseData.sales > 0 ? (baseData.belowGP / baseData.sales) * 100 : 0,
        
        // Unit economics
        pricePerKg: baseData.salesVolume > 0 ? baseData.sales / baseData.salesVolume : 0,
        revenuePerTon: baseData.salesVolume > 0 ? baseData.sales / (baseData.salesVolume / 1000) : 0,
        materialCostPerTon: baseData.salesVolume > 0 ? baseData.material / (baseData.salesVolume / 1000) : 0,
        grossProfitPerTon: baseData.salesVolume > 0 ? baseData.grossProfit / (baseData.salesVolume / 1000) : 0,
        mfgCostPerTon: baseData.salesVolume > 0 ? baseData.mfgExpenses / (baseData.salesVolume / 1000) : 0,
        
        // Additional calculations
        marginOverMaterial: baseData.material > 0 ? ((baseData.sales - baseData.material) / baseData.material) * 100 : 0,
        totalCosts: baseData.material + baseData.mfgExpenses + baseData.belowGP,
        totalCostRatio: baseData.sales > 0 ? ((baseData.material + baseData.mfgExpenses + baseData.belowGP) / baseData.sales) * 100 : 0
      };
      
      // Industry benchmarks (only use if not excluded)
      const norms = divisionNorms[division] || divisionNorms.FP;
      
      // Generate content based on preferences
      let aiText = `**COMPREHENSIVE FINANCIAL ANALYSIS: ${basePeriodName}**\n`;
      aiText += `**${divisionNames[division] || division}**\n\n`;
      
      // Executive Summary
      aiText += `**EXECUTIVE SUMMARY**\n\n`;
      aiText += `This analysis examines the financial performance of ${basePeriodName}, providing insights into revenue generation, cost management, and operational efficiency${userPreferences.excludeStrategy ? '.' : ', with strategic recommendations based on current positioning.'}\n\n`;
      
      // Financial Performance Overview
      aiText += `**FINANCIAL PERFORMANCE OVERVIEW**\n\n`;
      
      // Revenue Analysis
      aiText += `**Revenue & Volume Analysis:**\n`;
      aiText += `• Total Revenue: ${(baseData.sales/1000000).toFixed(2)}M\n`;
      aiText += `• Sales Volume: ${(baseData.salesVolume/1000).toFixed(1)} MT\n`;
      aiText += `• Average Selling Price: ${metrics.pricePerKg.toFixed(3)}/kg\n`;
      aiText += `• Revenue per Ton: ${(metrics.revenuePerTon/1000).toFixed(0)}k\n`;
      
      // Only include market positioning if not excluded
      if (!userPreferences.excludeMarketPositioning) {
        aiText += `• Market positioning: ${metrics.pricePerKg > 3.0 ? 'Premium pricing strategy' : metrics.pricePerKg > 2.0 ? 'Competitive market positioning' : 'Value-focused pricing approach'}\n`;
      }
      aiText += `\n`;
      
      // Profitability Analysis (enhanced if user prefers margin focus)
      aiText += `**Profitability Analysis:**\n`;
      aiText += `• Gross Profit: ${(baseData.grossProfit/1000000).toFixed(2)}M (${metrics.grossMargin.toFixed(1)}% margin)\n`;
      aiText += `• EBITDA: ${(baseData.ebitda/1000000).toFixed(2)}M (${metrics.ebitdaMargin.toFixed(1)}% margin)\n`;
      aiText += `• Net Profit: ${(baseData.netProfit/1000000).toFixed(2)}M (${metrics.netMargin.toFixed(1)}% margin)\n`;
      aiText += `• Gross Profit per Ton: ${(metrics.grossProfitPerTon/1000).toFixed(0)}k\n`;
      
      // Industry comparison only if not excluded
      if (!userPreferences.excludeIndustryBenchmarks) {
        aiText += `• Industry comparison: Gross margin ${metrics.grossMargin > norms.grossProfit ? 'ABOVE' : metrics.grossMargin > norms.grossProfit * 0.9 ? 'NEAR' : 'BELOW'} industry benchmark of ${norms.grossProfit}%\n`;
      }
      
      // Enhanced margin analysis if user prefers focus on margins
      if (userPreferences.focusOnMargins) {
        aiText += `• Margin efficiency: ${metrics.grossMargin > 20 ? 'Excellent' : metrics.grossMargin > 15 ? 'Good' : 'Needs improvement'} gross margin performance\n`;
        aiText += `• Profitability trend: Net margin indicates ${metrics.netMargin > 8 ? 'strong' : metrics.netMargin > 4 ? 'moderate' : 'challenged'} bottom-line performance\n`;
      }
      aiText += `\n`;
      
      // Cost Structure (enhanced if user prefers cost focus)
      aiText += `**Cost Structure Breakdown:**\n`;
      aiText += `• Material Costs: ${(baseData.material/1000000).toFixed(2)}M (${metrics.materialRatio.toFixed(1)}% of sales)\n`;
      aiText += `• Manufacturing Expenses: ${(baseData.mfgExpenses/1000000).toFixed(2)}M (${metrics.mfgRatio.toFixed(1)}% of sales)\n`;
      aiText += `• Below Gross Profit Costs: ${(baseData.belowGP/1000000).toFixed(2)}M (${metrics.belowGPRatio.toFixed(1)}% of sales)\n`;
      aiText += `• Total Operating Costs: ${(metrics.totalCosts/1000000).toFixed(2)}M (${metrics.totalCostRatio.toFixed(1)}% of sales)\n`;
      aiText += `• Material Cost per Ton: ${(metrics.materialCostPerTon/1000).toFixed(0)}k\n`;
      aiText += `• Manufacturing Cost per Ton: ${(metrics.mfgCostPerTon/1000).toFixed(0)}k\n`;
      
      // Enhanced cost analysis if user prefers cost focus
      if (userPreferences.focusOnCosts) {
        aiText += `• Cost efficiency rating: ${metrics.materialRatio < 60 ? 'Excellent' : metrics.materialRatio < 70 ? 'Good' : 'Needs improvement'} material cost control\n`;
        aiText += `• Manufacturing efficiency: ${metrics.mfgRatio < 15 ? 'Lean operations' : metrics.mfgRatio < 20 ? 'Standard efficiency' : 'High cost structure'}\n`;
        aiText += `• Cost optimization potential: ${metrics.totalCostRatio > 85 ? 'High' : metrics.totalCostRatio > 75 ? 'Moderate' : 'Low'} opportunity for cost reduction\n`;
      }
      aiText += `\n`;
      
      // Operational efficiency (enhanced if user prefers efficiency focus)
      if (userPreferences.focusOnEfficiency) {
        aiText += `**Operational Efficiency Analysis:**\n`;
        aiText += `• Asset Utilization: Production volume of ${(baseData.salesVolume/1000).toFixed(1)} MT indicates ${baseData.salesVolume > 50000 ? 'high-scale' : baseData.salesVolume > 20000 ? 'medium-scale' : 'focused-scale'} operations\n`;
        aiText += `• Production Efficiency: ${metrics.mfgRatio < 15 ? 'Excellent' : metrics.mfgRatio < 20 ? 'Good' : 'Needs improvement'} manufacturing performance\n`;
        aiText += `• Resource Optimization: ${metrics.materialRatio + metrics.mfgRatio < 75 ? 'Efficient' : 'Inefficient'} resource utilization\n\n`;
      }
      
      // ... rest of the generation logic (comparisons, strategy, etc.) ...
      // Apply user preferences to exclude sections they don't want
      
      // Apply learned preferences to the generated content
      aiText = applyUserPreferences(aiText);
      
      // Add preferences notice
      if (Object.keys(userPreferences).length > 0) {
        aiText += `\n*This analysis has been customized based on your learned preferences. Use the chat to modify or add new preferences.*`;
      } else {
        aiText += `\n*Use the chat interface to provide feedback and teach the AI your preferences for future analyses.*`;
      }
      
      setWriteup(aiText);
      setHasAutoGenerated(true);
      setGenerationCount(1);
      
      // Add initial chat message
      setChatMessages([{
        type: 'system',
        content: `Analysis generated with ${Object.keys(userPreferences).length} learned preferences applied. You can highlight any section and ask me to expand, or provide new preferences that I'll remember for future analyses.`,
        timestamp: new Date()
      }]);
      
    } catch (err) {
      console.error('Error generating writeup:', err);
      setError(`Failed to generate analysis: ${err.message}`);
    } finally {
      setLoading(false);
      clearTimeout(timeoutId);
    }
  }

  // Handle text selection in writeup
  const handleTextSelection = () => {
    const selection = window.getSelection();
    const selectedText = selection.toString().trim();
    if (selectedText.length > 0) {
      setSelectedText(selectedText);
      setShowChat(true);
    }
  };

  // Add function to capture current selection
  const captureSelectedText = () => {
    const selection = window.getSelection();
    const text = selection.toString().trim();
    if (text.length > 0) {
      setSelectedText(text);
      setShowChat(true);
      // Keep the selection visible
      return text;
    }
    return null;
  };

  // Clear selected text
  const clearSelectedText = () => {
    setSelectedText('');
  };

  // Enhanced chat submit with preference learning
  const handleChatSubmit = async (e) => {
    e.preventDefault();
    if (!currentPrompt.trim() || chatLoading) return;
    
    setChatLoading(true);
    const userMessage = currentPrompt.trim();
    
    // Add user message to chat
    const newUserMessage = {
      type: 'user',
      content: userMessage,
      context: selectedText,
      timestamp: new Date()
    };
    
    setChatMessages(prev => [...prev, newUserMessage]);
    setCurrentPrompt('');
    
    try {
      // Detect and save any new preferences
      const detectedPreferences = detectAndSavePreferences(userMessage);
      
      // Check if this is a correction request
      const isCorrection = userMessage.toLowerCase().includes('not') || 
                          userMessage.toLowerCase().includes('should be') || 
                          userMessage.toLowerCase().includes('change') || 
                          userMessage.toLowerCase().includes('correct') ||
                          userMessage.toLowerCase().includes('fix') ||
                          userMessage.toLowerCase().includes('replace');
      
      let aiResponseText = '';
      let updatedWriteup = writeup;
      
      if (detectedPreferences.length > 0) {
        // Preferences were detected and saved
        aiResponseText = `🧠 **PREFERENCES LEARNED**: I've saved the following preferences for future analyses:\n${detectedPreferences.map(p => `• ${p}`).join('\n')}\n\nThese will be automatically applied to all future writeup generations. You can view and manage all preferences using the "Show Preferences" button.`;
        
        // Apply preferences to current writeup
        const preferencesAppliedWriteup = applyUserPreferences(writeup);
        if (preferencesAppliedWriteup !== writeup) {
          setWriteup(preferencesAppliedWriteup);
          aiResponseText += '\n\n✅ **APPLIED TO CURRENT ANALYSIS**: Your preferences have been applied to the current writeup.';
        }
      }
      else if (isCorrection) {
        // Handle specific corrections
        if (userMessage.toLowerCase().includes('k tons') && userMessage.toLowerCase().includes('mt')) {
          // Replace k tons with MT throughout the writeup
          updatedWriteup = writeup.replace(/(\d+\.?\d*)\s*k\s*tons?/gi, '$1 MT');
          aiResponseText = '✅ **CORRECTION APPLIED**: Changed all volume units from "k tons" to "MT" throughout the analysis.';
          setWriteup(updatedWriteup);
        }
        else if (userMessage.toLowerCase().includes('thousand') && userMessage.toLowerCase().includes('million')) {
          // Handle currency unit corrections
          updatedWriteup = writeup.replace(/(\d+\.?\d*)\s*M\b/g, (match, number) => `${(parseFloat(number) * 1000).toFixed(0)}K`);
          aiResponseText = '✅ **CORRECTION APPLIED**: Updated currency units from millions to thousands.';
          setWriteup(updatedWriteup);
        }
        else {
          // Generic correction acknowledgment
          aiResponseText = '✅ **CORRECTION NOTED**: Please specify exactly what text should be replaced with what new text. For example: "Change X to Y" or "Replace A with B".';
        }
      }
      else {
        // Generate expanded content based on the request
        aiResponseText = await generateExpandedContent(userMessage, selectedText, currentFinancialData);
        
        // Add expanded content to writeup if it's an expansion request
        if (userMessage.toLowerCase().includes('add') || 
            userMessage.toLowerCase().includes('expand') || 
            userMessage.includes('detail') ||
            userMessage.includes('more')) {
          const enhancedContent = applyUserPreferences(aiResponseText);
          setWriteup(prev => prev + '\n\n' + enhancedContent);
        }
      }
      
      // Add AI response to chat
      const aiMessage = {
        type: 'assistant',
        content: aiResponseText,
        timestamp: new Date()
      };
      
      setChatMessages(prev => [...prev, aiMessage]);
      
    } catch (err) {
      console.error('Chat error:', err);
      const errorMessage = {
        type: 'error',
        content: 'Sorry, I encountered an error processing your request. Please try again.',
        timestamp: new Date()
      };
      setChatMessages(prev => [...prev, errorMessage]);
    } finally {
      setChatLoading(false);
      setSelectedText('');
    }
  };

  // Generate expanded content for the writeup
  const generateExpandedContent = async (prompt, context, financialData) => {
    const data = financialData || {};
    const lowerPrompt = prompt.toLowerCase();
    
    if (lowerPrompt.includes('margin') || lowerPrompt.includes('profitability')) {
      return `**DETAILED MARGIN ANALYSIS**

Expanded profitability insights for enhanced decision-making:

**Cost Structure Breakdown:**
• Material costs represent ${data.sales > 0 ? ((data.material || 0) / data.sales * 100).toFixed(1) : 'N/A'}% of total sales revenue
• Manufacturing expenses account for ${data.sales > 0 ? ((data.mfgExpenses || 0) / data.sales * 100).toFixed(1) : 'N/A'}% of sales
• Below gross profit costs constitute ${data.sales > 0 ? ((data.belowGP || 0) / data.sales * 100).toFixed(1) : 'N/A'}% of revenue

**Margin Optimization Opportunities:**
• Supplier negotiations could reduce material costs by 2-3%
• Manufacturing efficiency improvements through lean operations
• Process automation potential to reduce labor costs
• Product mix optimization toward higher-margin offerings
• Pricing strategy refinement based on value proposition

**Profitability Benchmarking:**
• Current gross margin performance relative to industry standards
• Net margin efficiency compared to sector averages
• EBITDA generation capacity for reinvestment and growth
• Return on assets and capital efficiency metrics`;
    }
    
    if (lowerPrompt.includes('volume') || lowerPrompt.includes('sales')) {
      const volumeMT = data.salesVolume ? (data.salesVolume / 1000).toFixed(1) : 'N/A';
      return `**COMPREHENSIVE VOLUME ANALYSIS**

Detailed sales volume insights and strategic implications:

**Current Volume Performance:**
• Sales Volume: ${volumeMT} MT representing ${data.salesVolume > 50000 ? 'large-scale' : data.salesVolume > 20000 ? 'medium-scale' : 'focused'} market operations
• Average selling price: ${data.salesVolume > 0 ? (data.sales / data.salesVolume).toFixed(3) : 'N/A'}/kg
• Revenue per MT: ${data.salesVolume > 0 ? ((data.sales / (data.salesVolume / 1000)) / 1000).toFixed(0) : 'N/A'}K

**Volume Growth Strategies:**
• Market expansion opportunities in adjacent segments
• Customer acquisition through competitive positioning
• Capacity utilization optimization for scale economies
• Product development for market share gains
• Strategic partnerships for distribution expansion

**Operational Implications:**
• Manufacturing capacity utilization rates
• Inventory management and working capital optimization
• Supply chain efficiency and logistics coordination
• Quality management and customer satisfaction impact`;
    }
    
    if (lowerPrompt.includes('cost') || lowerPrompt.includes('expense')) {
      return `**COMPREHENSIVE COST ANALYSIS**

Detailed cost structure examination and optimization roadmap:

**Variable Cost Management:**
• Material cost per MT: ${data.salesVolume > 0 ? ((data.material / (data.salesVolume / 1000)) / 1000).toFixed(0) : 'N/A'}K
• Direct labor efficiency and productivity metrics
• Energy and utilities cost optimization opportunities
• Transportation and logistics cost management

**Fixed Cost Optimization:**
• Manufacturing overhead allocation and efficiency
• Administrative cost reduction through process improvement
• Technology investments for long-term cost savings
• Facility utilization and capacity planning

**Cost Control Initiatives:**
• Supplier relationship management and negotiation strategies
• Process improvement and lean manufacturing implementation
• Automation investments for labor cost reduction
• Energy efficiency programs and sustainability initiatives`;
    }
    
    if (lowerPrompt.includes('growth') || lowerPrompt.includes('strategy')) {
      return `**STRATEGIC GROWTH ANALYSIS**

Comprehensive growth strategy framework and implementation roadmap:

**Market Expansion Opportunities:**
• Geographic expansion into emerging markets
• Product line extension and diversification
• Customer segment penetration and development
• Strategic acquisitions and partnerships

**Operational Excellence:**
• Manufacturing efficiency and productivity improvements
• Quality management and customer satisfaction enhancement
• Supply chain optimization and risk management
• Technology adoption and digital transformation

**Financial Performance Enhancement:**
• Working capital optimization and cash flow management
• Investment prioritization and capital allocation
• Cost structure optimization and margin improvement
• Performance measurement and continuous improvement systems`;
    }
    
    // Default response for general queries
    return `**ADDITIONAL ANALYSIS**

Based on your request for "${prompt}", here are relevant insights:

**Performance Assessment:**
• Current financial metrics indicate ${data.sales > 0 ? 'active operations with' : 'limited data with'} opportunities for optimization
• Strategic positioning shows ${data.salesVolume > 30000 ? 'strong' : 'developing'} market presence
• Operational efficiency metrics suggest potential for improvement

**Strategic Recommendations:**
• Focus on margin enhancement through cost optimization
• Pursue volume growth through market expansion
• Implement operational excellence initiatives
• Develop competitive advantages through differentiation

**Implementation Priorities:**
• Short-term: Cost reduction and efficiency improvements
• Medium-term: Market expansion and customer development
• Long-term: Strategic positioning and competitive advantage building

*Please specify particular areas for more detailed analysis.*`;
  };

  // No automatic generation - user must click Generate
  useEffect(() => {
    // Clear writeup when period changes, but don't auto-generate
    setWriteup('');
    setHasAutoGenerated(false);
    setGenerationCount(0); // Reset generation count for new period
    setError(null);
    // eslint-disable-next-line
  }, [periodKey, division]);

  // Split writeup into summary and bullet points
  const [summary, ...bullets] = writeup.split(/\n• /);
  const bulletPoints = bullets.map((b, i) => (b.trim().startsWith('•') ? b.trim().slice(1) : b.trim()));

  // Handle contentEditable changes
  const handleDivEdit = (e) => {
    setWriteup(e.currentTarget.innerText);
    setEditing(true);
  };
  const handleDivBlur = async (e) => {
    setEditing(false);
    // No auto-save - user can manually save if needed
  };

  // Update the display formatting function
  const formatWriteupForDisplay = (text) => {
    if (!text) return null;
    const paragraphs = text.split('\n\n').filter(p => p.trim() !== '');
    return paragraphs.map((para, pIdx) => {
      if (para.includes('\n• ')) {
        const [heading, ...items] = para.split('\n• ');
        return (
          <div key={pIdx}>
            <div dangerouslySetInnerHTML={{ __html: heading.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') }} />
            <ul style={{ margin: 0, paddingLeft: 24 }}>
              {items.map((item, iIdx) => (
                <li key={`${pIdx}-${iIdx}`} style={{ marginBottom: 8 }} dangerouslySetInnerHTML={{ __html: item.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') }} />
              ))}
            </ul>
          </div>
        );
      } else {
        return <div key={pIdx} style={{ marginBottom: 12 }} dangerouslySetInnerHTML={{ __html: para.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') }} />;
      }
    });
  };

  return (
    <div className="ai-writeup-container" style={{ display: 'flex', gap: 24, marginTop: 40 }}>
      {/* Main Writeup Panel */}
      <div className="ai-writeup-content" style={{
        flex: 2,
        background: '#fff',
        borderRadius: 8,
        boxShadow: '0 2px 10px rgba(0,0,0,0.05)',
        padding: 24,
        textAlign: 'left',
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
          <div>
            <h2 style={{ fontSize: 24, fontWeight: 700, marginBottom: 8, fontFamily: 'Segoe UI, Roboto, Arial, sans-serif' }}>Financial Analysis Write-up</h2>
            <div style={{ fontSize: 18, fontWeight: 500, color: '#288cfa', fontFamily: 'Segoe UI, Roboto, Arial, sans-serif' }}>
              {divisionNames[division] || division}
            </div>
          </div>
          <div style={{ display: 'flex', gap: 8 }}>
            <button
              onClick={() => setShowPreferences(!showPreferences)}
              style={{
                background: showPreferences ? '#fbbf24' : '#374151',
                color: '#fff',
                border: 'none',
                borderRadius: 4,
                padding: '8px 16px',
                fontWeight: 600,
                cursor: 'pointer',
                fontSize: 14
              }}
            >
              {showPreferences ? 'Hide Preferences' : `Preferences (${Object.keys(userPreferences).length})`}
            </button>
            <button
              onClick={() => setShowChat(!showChat)}
              style={{
                background: showChat ? '#22c55e' : '#6b7280',
                color: '#fff',
                border: 'none',
                borderRadius: 4,
                padding: '8px 16px',
                fontWeight: 600,
                cursor: 'pointer'
              }}
            >
              {showChat ? 'Hide Chat' : 'Show Chat'}
            </button>
          </div>
        </div>
        
        {error && <div style={{ color: 'red', marginBottom: 8 }}>{error}</div>}
        
        {/* Usage Instructions */}
        <div style={{
          background: '#f0f9ff',
          border: '1px solid #0ea5e9',
          borderRadius: 6,
          padding: 12,
          marginBottom: 16,
          fontSize: 14
        }}>
          <strong>📝 How to Use the AI Writing Assistant:</strong>
          <div style={{ marginTop: 8 }}>
            <div>1. <strong>Generate Analysis:</strong> Click "Generate Analysis" below to create your writeup</div>
            <div>2. <strong>Select Text:</strong> Highlight any part of the analysis you want to discuss</div>
            <div>3. <strong>Open Chat:</strong> Click "Show Chat" button (chat opens automatically when you select text)</div>
            <div>4. <strong>Ask AI:</strong> Type your request - expand, correct, or teach preferences</div>
            <div style={{ marginTop: 6, paddingLeft: 16, fontSize: 13, color: '#0369a1' }}>
              💡 <strong>Tip:</strong> Selected text will appear in a blue box in the chat - you don't need to re-type it!
            </div>
          </div>
        </div>
        
        <div
          ref={writeupRef}
          contentEditable
          suppressContentEditableWarning
          onMouseUp={handleTextSelection}
          onInput={(e) => setWriteup(e.currentTarget.innerText)}
          className="ai-writeup-contenteditable"
          style={{
            width: '100%',
            fontSize: 16,
            fontFamily: 'Segoe UI, Roboto, Arial, sans-serif',
            borderRadius: 6,
            border: '1px solid #ccc',
            padding: 16,
            minHeight: 400,
            background: '#fafbfc',
            outline: 'none',
            lineHeight: 1.7,
            marginBottom: 12,
            whiteSpace: 'pre-wrap',
            boxSizing: 'border-box',
            userSelect: 'text'
          }}
          spellCheck={true}
        >
          {writeup || (
            <div style={{ color: '#666', fontStyle: 'italic' }}>
              Click "Generate Analysis" to create a comprehensive financial analysis. Then use the chat interface to expand on specific sections or add detailed insights.
            </div>
          )}
        </div>
        
        <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 12 }}>
          <button
            onClick={() => {
              const text = captureSelectedText();
              if (!text) {
                alert('Please select some text in the writeup above first, then click this button.');
              }
            }}
            style={{
              background: '#6366f1',
              color: '#fff',
              border: 'none',
              borderRadius: 4,
              padding: '8px 16px',
              fontWeight: 600,
              fontSize: 14,
              cursor: 'pointer'
            }}
          >
            📌 Capture Selected Text
          </button>
          <button
            onClick={generateDetailedWriteup}
            disabled={loading}
            style={{
              background: '#288cfa',
              color: '#fff',
              border: 'none',
              borderRadius: 4,
              padding: '10px 24px',
              fontWeight: 600,
              fontSize: 16,
              cursor: loading ? 'not-allowed' : 'pointer',
              opacity: loading ? 0.7 : 1
            }}
          >
            {loading ? 'Generating...' : 'Generate Analysis'}
          </button>
        </div>
      </div>

      {/* Chat Interface */}
      {showChat && (
        <div style={{
          flex: 1,
          background: '#fff',
          borderRadius: 8,
          boxShadow: '0 2px 10px rgba(0,0,0,0.05)',
          padding: 16,
          display: 'flex',
          flexDirection: 'column',
          maxHeight: '600px'
        }}>
          <h3 style={{ margin: '0 0 16px 0', fontSize: 18, fontWeight: 600, color: '#374151' }}>
            AI Writing Assistant
          </h3>
          
          {selectedText && (
            <div style={{
              background: '#eff6ff',
              border: '1px solid #bfdbfe',
              borderRadius: 4,
              padding: 8,
              marginBottom: 12,
              fontSize: 14,
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'flex-start'
            }}>
              <div style={{ flex: 1 }}>
                <strong>📌 Selected Text:</strong><br/>
                <span style={{ fontStyle: 'italic', color: '#1e40af' }}>
                  "{selectedText.length > 150 ? selectedText.substring(0, 150) + '...' : selectedText}"
                </span>
                <div style={{ fontSize: 12, marginTop: 4, color: '#64748b' }}>
                  💬 Now ask me to expand on this, correct it, or teach me preferences about it
                </div>
              </div>
              <button
                onClick={clearSelectedText}
                style={{
                  background: '#dc2626',
                  color: '#fff',
                  border: 'none',
                  borderRadius: 3,
                  padding: '4px 8px',
                  fontSize: 11,
                  cursor: 'pointer',
                  marginLeft: 8
                }}
              >
                Clear
              </button>
            </div>
          )}
          
          {!selectedText && (
            <div style={{
              background: '#f8fafc',
              border: '1px solid #e2e8f0',
              borderRadius: 4,
              padding: 8,
              marginBottom: 12,
              fontSize: 13,
              color: '#64748b',
              textAlign: 'center'
            }}>
              💡 Select any text in the writeup above to discuss it with AI, or just type your request below
            </div>
          )}
          
          {/* Chat Messages */}
          <div style={{
            flex: 1,
            overflowY: 'auto',
            marginBottom: 12,
            minHeight: 200,
            maxHeight: 300
          }}>
            {chatMessages.map((message, index) => (
              <div
                key={index}
                style={{
                  marginBottom: 12,
                  padding: 8,
                  borderRadius: 4,
                  background: message.type === 'user' ? '#dbeafe' : message.type === 'error' ? '#fee2e2' : '#f3f4f6',
                  border: `1px solid ${message.type === 'user' ? '#93c5fd' : message.type === 'error' ? '#fca5a5' : '#d1d5db'}`
                }}
              >
                <div style={{ fontSize: 12, color: '#6b7280', marginBottom: 4 }}>
                  {message.type === 'user' ? 'You' : message.type === 'error' ? 'Error' : 'AI Assistant'}
                </div>
                <div style={{ fontSize: 14, whiteSpace: 'pre-wrap' }}>
                  {message.content}
                </div>
              </div>
            ))}
            {chatLoading && (
              <div style={{ padding: 8, color: '#6b7280', fontSize: 14 }}>
                AI is thinking...
              </div>
            )}
          </div>
          
          {/* Chat Input */}
          <form onSubmit={handleChatSubmit} style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>
            <textarea
              ref={chatInputRef}
              value={currentPrompt}
              onChange={(e) => setCurrentPrompt(e.target.value)}
              placeholder="Ask me to expand on any section, add details, or analyze specific aspects..."
              style={{
                resize: 'none',
                padding: 8,
                border: '1px solid #ccc',
                borderRadius: 4,
                fontSize: 14,
                minHeight: 60,
                outline: 'none'
              }}
              disabled={chatLoading}
            />
            <button
              type="submit"
              disabled={chatLoading || !currentPrompt.trim()}
              style={{
                background: '#10b981',
                color: '#fff',
                border: 'none',
                borderRadius: 4,
                padding: '8px 16px',
                fontWeight: 600,
                cursor: chatLoading || !currentPrompt.trim() ? 'not-allowed' : 'pointer',
                opacity: chatLoading || !currentPrompt.trim() ? 0.7 : 1
              }}
            >
              {chatLoading ? 'Processing...' : 'Send'}
            </button>
          </form>
          
          <div style={{ fontSize: 12, color: '#6b7280', marginTop: 8 }}>
            💡 <strong>Expansion:</strong> "Add more detail about cost structure", "Expand on profitability analysis"<br/>
            🧠 <strong>Learn Preferences:</strong> "Don't mention market positioning", "Always focus on costs", "Use MT not k tons"<br/>
            ✏️ <strong>Corrections:</strong> "Change X to Y", "Replace A with B", "Fix the volume units"
          </div>
        </div>
      )}

      {/* Preferences Panel */}
      {showPreferences && (
        <div style={{
          background: '#f9fafb',
          border: '1px solid #e5e7eb',
          borderRadius: 8,
          padding: 16,
          marginBottom: 16
        }}>
          <h3 style={{ margin: '0 0 12px 0', fontSize: 18, fontWeight: 600, color: '#374151' }}>
            🧠 Learned Preferences for {divisionNames[division] || division}
          </h3>
          
          {Object.keys(userPreferences).length === 0 ? (
            <p style={{ color: '#6b7280', fontStyle: 'italic', margin: 0 }}>
              No preferences learned yet. Use the chat to teach the AI your preferences by saying things like:
              <br />• "Don't mention market positioning"
              <br />• "Always focus on cost analysis"
              <br />• "Use MT instead of k tons"
            </p>
          ) : (
            <div>
              <div style={{ marginBottom: 12 }}>
                <strong>Current Preferences:</strong>
              </div>
              <div style={{ display: 'grid', gap: 8 }}>
                {Object.entries(userPreferences).map(([key, value]) => {
                  if (!value) return null;
                  
                  const getPreferenceDescription = (prefKey) => {
                    const descriptions = {
                      excludeMarketPositioning: '🚫 Exclude market positioning and market data',
                      excludeIndustryBenchmarks: '🚫 Exclude industry benchmarks and comparisons',
                      excludeStrategy: '🚫 Exclude strategic recommendations',
                      excludeGrowth: '🚫 Exclude growth analysis',
                      focusOnCosts: '🎯 Focus on cost analysis',
                      focusOnMargins: '🎯 Focus on margin analysis',
                      focusOnEfficiency: '🎯 Focus on operational efficiency',
                      preferShortFormat: '📝 Prefer short, concise format',
                      preferDetailedFormat: '📝 Prefer detailed, comprehensive format',
                      preferMT: '📏 Use MT for volume units',
                      preferThousands: '💰 Use thousands (K) for currency'
                    };
                    return descriptions[prefKey] || prefKey;
                  };
                  
                  return (
                    <div key={key} style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      background: '#fff',
                      padding: '8px 12px',
                      borderRadius: 4,
                      border: '1px solid #d1d5db'
                    }}>
                      <span style={{ fontSize: 14 }}>{getPreferenceDescription(key)}</span>
                      <button
                        onClick={() => {
                          const newPreferences = { ...userPreferences };
                          delete newPreferences[key];
                          setUserPreferences(newPreferences);
                        }}
                        style={{
                          background: '#ef4444',
                          color: '#fff',
                          border: 'none',
                          borderRadius: 3,
                          padding: '4px 8px',
                          fontSize: 12,
                          cursor: 'pointer'
                        }}
                      >
                        Remove
                      </button>
                    </div>
                  );
                })}
              </div>
              
              <div style={{ marginTop: 12, paddingTop: 12, borderTop: '1px solid #e5e7eb' }}>
                <button
                  onClick={() => {
                    setUserPreferences({});
                    localStorage.removeItem(`aiWriteupPreferences_${division}`);
                  }}
                  style={{
                    background: '#dc2626',
                    color: '#fff',
                    border: 'none',
                    borderRadius: 4,
                    padding: '6px 12px',
                    fontSize: 12,
                    cursor: 'pointer',
                    marginRight: 8
                  }}
                >
                  Clear All Preferences
                </button>
                <span style={{ fontSize: 12, color: '#6b7280' }}>
                  Preferences are saved automatically and persist across sessions
                </span>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default AIWriteupPanel; 