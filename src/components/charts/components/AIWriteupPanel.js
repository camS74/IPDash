import React, { useState, useEffect, useRef } from 'react';

// Placeholder async backend API functions
async function fetchWriteup(periodKey, division) {
  return {
    marginOverMaterial: 18,
    grossProfit: 15,
    netProfit: 7,
    ebitda: 12,
  };
}

async function saveWriteup(periodKey, division, text) {
  return true;
}

function getPeriodKey(selectedPeriods) {
  return selectedPeriods.map(p => `${p.year}-${p.month || 'Year'}-${p.type}`).join('|');
}

const AIWriteupPanel = ({ tableData, selectedPeriods, basePeriod, division, chatContext, computeCellValue }) => {
  const [writeup, setWriteup] = useState('');
  const [loading, setLoading] = useState(false);
  const [editing, setEditing] = useState(false);
  const [error, setError] = useState(null);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [generationCount, setGenerationCount] = useState(0);
  const [chatMessages, setChatMessages] = useState([]);
  const [currentPrompt, setCurrentPrompt] = useState('');
  const [selectedText, setSelectedText] = useState('');
  const [showChat, setShowChat] = useState(false);
  const [chatLoading, setChatLoading] = useState(false);
  const [currentFinancialData, setCurrentFinancialData] = useState(null);
  const [userPreferences, setUserPreferences] = useState({});
  const [showPreferences, setShowPreferences] = useState(false);
  const [industryNorms, setIndustryNorms] = useState({});
  const [regenerationFeedback, setRegenerationFeedback] = useState('');

  const writeupRef = useRef(null);
  const chatInputRef = useRef(null);

  const periodKey = getPeriodKey(selectedPeriods);

  const divisionNames = {
    FP: 'Flexible Packaging Division',
    SB: 'Shopping Bags Division',
    TF: 'Thermoforming Products Division',
    HCM: 'Preforms and Closures Division',
  };

  // Load saved preferences and industry norms on component mount
  useEffect(() => {
    console.log(`Loading preferences for division: ${division}`);
    const savedPreferences = localStorage.getItem(`aiWriteupPreferences_${division}`);
    if (savedPreferences) {
      try {
        const parsedPreferences = JSON.parse(savedPreferences);
        console.log('Loaded preferences from localStorage:', parsedPreferences);
        setUserPreferences(parsedPreferences);
      } catch (err) {
        console.warn('Failed to load preferences:', err);
      }
    } else {
      console.log('No preferences found in localStorage.');
    }
    const loadNorms = async () => {
      const norms = await fetchWriteup(periodKey, division);
      setIndustryNorms(norms || {});
    };
    loadNorms();
  }, [division, periodKey]);

  // Save preferences to localStorage whenever they change
  useEffect(() => {
    if (Object.keys(userPreferences).length > 0) {
      console.log('Saving preferences to localStorage:', userPreferences);
      localStorage.setItem(`aiWriteupPreferences_${division}`, JSON.stringify(userPreferences));
    } else {
      console.log('Clearing preferences from localStorage as userPreferences is empty.');
      localStorage.removeItem(`aiWriteupPreferences_${division}`);
    }
  }, [userPreferences, division]);

  // Helper to replace text in write-up and update content-editable
  const replaceInWriteup = (oldText, newText, caseSensitive = false) => {
    let updatedWriteup = writeup;
    const escapedText = oldText.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    if (caseSensitive) {
      updatedWriteup = updatedWriteup.replace(new RegExp(escapedText, 'g'), newText);
    } else {
      updatedWriteup = updatedWriteup.replace(new RegExp(escapedText, 'gi'), newText);
    }
    setWriteup(updatedWriteup);
    if (writeupRef.current) {
      writeupRef.current.innerText = updatedWriteup;
    }
    return updatedWriteup;
  };

  // Detect and save user preferences from chat messages with validation
  const detectAndSavePreferences = (userMessage) => {
    console.log('Detecting preferences from message:', userMessage);
    const lowerMessage = userMessage.toLowerCase();
    const newPreferences = { ...userPreferences };
    let preferencesDetected = [];
    
    if (lowerMessage.includes("don't mention") || lowerMessage.includes("exclude") || 
        lowerMessage.includes("remove") || lowerMessage.includes("don't do") || 
        lowerMessage.includes("should not")) {
      if (lowerMessage.includes("market positioning") || lowerMessage.includes("market data")) {
        newPreferences.excludeMarketPositioning = true;
        preferencesDetected.push("Exclude market positioning and market data");
      }
      if (lowerMessage.includes("industry benchmark") || lowerMessage.includes("industry comparison")) {
        newPreferences.excludeIndustryBenchmarks = true;
        preferencesDetected.push("Exclude industry benchmarks and comparisons");
      }
      if (lowerMessage.includes("strategy") || lowerMessage.includes("strategic")) {
        newPreferences.excludeStrategy = true;
        preferencesDetected.push("Exclude strategic recommendations");
      }
      if (lowerMessage.includes("growth") || lowerMessage.includes("expansion")) {
        newPreferences.excludeGrowth = true;
        preferencesDetected.push("Exclude growth analysis");
      }
      if (lowerMessage.includes("trend") || lowerMessage.includes("yoy") || 
          lowerMessage.includes("year-over-year")) {
        newPreferences.excludeTrends = true;
        preferencesDetected.push("Exclude trend and YoY comparisons");
      }
      if ((lowerMessage.includes("remove") || lowerMessage.includes("delete")) && selectedText) {
        newPreferences.excludedText = newPreferences.excludedText || [];
        if (!newPreferences.excludedText.includes(selectedText)) {
          newPreferences.excludedText.push(selectedText);
          preferencesDetected.push(`Exclude specific text: "${selectedText.length > 50 ? selectedText.substring(0, 50) + '...' : selectedText}"`);
        }
      }
    }
    
    if (lowerMessage.includes("always include") || lowerMessage.includes("always add") || 
        lowerMessage.includes("focus on")) {
      if (lowerMessage.includes("cost") || lowerMessage.includes("expense")) {
        newPreferences.focusOnCosts = true;
        preferencesDetected.push("Focus on cost analysis");
      }
      if (lowerMessage.includes("margin") || lowerMessage.includes("profitability")) {
        newPreferences.focusOnMargins = true;
        preferencesDetected.push("Focus on margin analysis");
      }
      if (lowerMessage.includes("e Yalency") || lowerMessage.includes("operational")) {
        newPreferences.focusOnEfficiency = true;
        preferencesDetected.push("Focus on operational efficiency");
      }
    }
    
    if (lowerMessage.includes("short") || lowerMessage.includes("brief") || 
        lowerMessage.includes("concise")) {
      newPreferences.preferShortFormat = true;
      if (newPreferences.preferDetailedFormat) {
        delete newPreferences.preferDetailedFormat;
        preferencesDetected.push("Conflict resolved: Prefer short format (removed detailed format preference)");
      }
      preferencesDetected.push("Prefer short, concise format");
    }
    if (lowerMessage.includes("detailed") || lowerMessage.includes("comprehensive") || 
        lowerMessage.includes("thorough")) {
      newPreferences.preferDetailedFormat = true;
      if (newPreferences.preferShortFormat) {
        delete newPreferences.preferShortFormat;
        preferencesDetected.push("Conflict resolved: Prefer detailed format (removed short format preference)");
      }
      preferencesDetected.push("Prefer detailed, comprehensive format");
    }
    
    if (lowerMessage.includes("use mt") || lowerMessage.includes("metric tons")) {
      newPreferences.preferMT = true;
      preferencesDetected.push("Use MT for volume units");
    }
    if (lowerMessage.includes("thousands") || lowerMessage.includes("use k")) {
      newPreferences.preferThousands = true;
      preferencesDetected.push("Use thousands (K) for currency");
    }
    
    if (preferencesDetected.length > 0) {
      console.log('New preferences detected:', newPreferences);
      setUserPreferences(newPreferences);
      return preferencesDetected;
    }
    
    console.log('No preferences detected from message.');
    return [];
  };

  // Apply user preferences to generated content
  const applyUserPreferences = (content) => {
    console.log('Applying preferences to content:', userPreferences);
    let modifiedContent = content;
    
    if (userPreferences.excludeMarketPositioning) {
      modifiedContent = modifiedContent.replace(/• Market Positioning:.*?\n/g, '');
      modifiedContent = modifiedContent.replace(/\*\*Market Position.*?\n\n/gs, '');
      console.log('Removed market positioning sections.');
    }
    
    if (userPreferences.excludeIndustryBenchmarks) {
      modifiedContent = modifiedContent.replace(/• Industry comparison:.*?\n/g, '');
      modifiedContent = modifiedContent.replace(/Industry norm:.*?\)/g, ')');
      modifiedContent = modifiedContent.replace(/vs Industry norm.*?\n/g, '\n');
      console.log('Removed industry benchmark sections.');
    }
    
    if (userPreferences.excludeStrategy) {
      modifiedContent = modifiedContent.replace(/\*\*STRATEGIC RECOMMENDATIONS\*\*.*?(?=\*\*|$)/gs, '');
      console.log('Removed strategic recommendations.');
    }
    
    if (userPreferences.excludeGrowth) {
      modifiedContent = modifiedContent.replace(/\*\*.*?GROWTH.*?\*\*.*?(?=\*\*|$)/gs, '');
      console.log('Removed growth analysis sections.');
    }
    
    if (userPreferences.excludeTrends) {
      modifiedContent = modifiedContent.replace(/\(\s*[\+\-]?\d+\.\d+%\s*YoY\)/g, '');
      modifiedContent = modifiedContent.replace(/,\s*[\+\-]?\d+\.\d+%\s*YoY/g, '');
      modifiedContent = modifiedContent.replace(/CAGR\s*[\+\-]?\d+\.\d+%\s*over\s*\d+\s*years/g, '');
      console.log('Removed trend and YoY comparisons.');
    }
    
    if (userPreferences.excludedText && userPreferences.excludedText.length > 0) {
      userPreferences.excludedText.forEach(text => {
        const escapedText = text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        const regex = new RegExp(`(${escapedText})`, 'gi');
        const originalLength = modifiedContent.length;
        modifiedContent = modifiedContent.replace(regex, '');
        if (modifiedContent.length < originalLength) {
          console.log(`Successfully removed excluded text: "${text}"`);
        } else {
          console.log(`No instances of excluded text found: "${text}"`);
        }
      });
    }
    
    if (userPreferences.preferMT) {
      modifiedContent = modifiedContent.replace(/k tons?/g, 'MT');
      console.log('Changed volume units to MT.');
    }
    
    if (userPreferences.preferThousands) {
      modifiedContent = modifiedContent.replace(/(\d+\.?\d*)\s*M\b/g, (match, number) => `${(parseFloat(number) * 1000).toFixed(0)}K`);
      console.log('Changed currency units to thousands (K).');
    }
    
    return modifiedContent;
  };

  // Adjust content based on format preference (short or detailed)
  const adjustFormat = (content) => {
    let modifiedContent = content;
    
    if (userPreferences.preferShortFormat) {
      modifiedContent = modifiedContent.replace(/• Cost per Ton Trend:.*?\n/g, '');
      modifiedContent = modifiedContent.replace(/• Margin Efficiency:.*?\n/g, '');
      modifiedContent = modifiedContent.replace(/• Profitability Trend:.*?\n/g, '');
      modifiedContent = modifiedContent.replace(/• Cost Efficiency:.*?\n/g, '');
      modifiedContent = modifiedContent.replace(/• Cost Trend:.*?\n/g, '');
      modifiedContent = modifiedContent.replace(/\*\*OPERATIONAL EFFICIENCY ANALYSIS\*\*.*?(?=\*\*|$)/gs, '');
      console.log('Applied short format: Removed detailed sections.');
    } else if (userPreferences.preferDetailedFormat) {
      if (!modifiedContent.includes('**DETAILED METRICS**')) {
        modifiedContent += `\n\n**DETAILED METRICS**\n`;
        modifiedContent += `• Total Cost Breakdown: Material (${(currentFinancialData?.material / 1000000 || 0).toFixed(2)}M), Mfg (${(currentFinancialData?.mfgExpenses / 1000000 || 0).toFixed(2)}M), Below GP (${(currentFinancialData?.belowGP / 1000000 || 0).toFixed(2)}M)\n`;
        modifiedContent += `• Efficiency Ratios: Material/Sales (${(currentFinancialData?.sales > 0 ? (currentFinancialData.material / currentFinancialData.sales * 100) : 0).toFixed(1)}%), Mfg/Sales (${(currentFinancialData?.sales > 0 ? (currentFinancialData.mfgExpenses / currentFinancialData.sales * 100) : 0).toFixed(1)}%)\n`;
        console.log('Applied detailed format: Added detailed metrics.');
      }
    }
    
    return modifiedContent;
  };

  // Enhanced generation function for writeup
  async function generateDetailedWriteup() {
    if (loading) {
      console.log('Generation already in progress, ignoring call');
      return;
    }

    console.log('Starting detailed writeup generation with user preferences:', userPreferences);
    setLoading(true);
    setError(null);
    setRegenerationFeedback('');

    const timeoutId = setTimeout(() => {
      console.warn('Generation timeout - forcing loading state reset');
      setLoading(false);
      setError('Generation timed out. Please try again.');
    }, 30000);

    try {
      function getKPI(rowIndex, period) {
        if (!period || !computeCellValue) return 0;
        try {
          const value = computeCellValue(rowIndex, period);
          return typeof value === 'number' && !isNaN(value) ? value : 0;
        } catch (err) {
          console.error(`Error getting KPI for row ${rowIndex}:`, err);
          return 0;
        }
      }

      if (!basePeriod || !selectedPeriods || selectedPeriods.length === 0) {
        throw new Error('Missing required period data');
      }

      const basePeriodName = `${basePeriod.year} ${basePeriod.isCustomRange ? basePeriod.displayName : (basePeriod.month || '')} ${basePeriod.type}`.trim();
      const baseData = {
        sales: getKPI(3, basePeriod),
        material: getKPI(5, basePeriod),
        grossProfit: getKPI(4, basePeriod),
        mfgExpenses: getKPI(14, basePeriod),
        belowGP: getKPI(52, basePeriod),
        netProfit: getKPI(54, basePeriod),
        ebitda: getKPI(56, basePeriod),
        salesVolume: getKPI(7, basePeriod),
        labor: getKPI(15, basePeriod),
        electricity: getKPI(17, basePeriod),
        admin: getKPI(19, basePeriod),
      };

      const prevPeriodsData = selectedPeriods
        .filter(p => p !== basePeriod)
        .map(p => ({
          year: p.year,
          sales: getKPI(3, p),
          material: getKPI(5, p),
          grossProfit: getKPI(4, p),
          netProfit: getKPI(54, p),
          ebitda: getKPI(56, p),
          salesVolume: getKPI(7, p),
          mfgExpenses: getKPI(14, p),
        }));

      const totalCosts = baseData.material + baseData.mfgExpenses + baseData.belowGP;

      const metrics = {
        grossMargin: baseData.sales > 0 ? (baseData.grossProfit / baseData.sales) * 100 : 0,
        netMargin: baseData.sales > 0 ? (baseData.netProfit / baseData.sales) * 100 : 0,
        ebitdaMargin: baseData.sales > 0 ? (baseData.ebitda / baseData.sales) * 100 : 0,
        materialRatio: baseData.sales > 0 ? (baseData.material / baseData.sales) * 100 : 0,
        mfgRatio: baseData.sales > 0 ? (baseData.mfgExpenses / baseData.sales) * 100 : 0,
        belowGPRatio: baseData.sales > 0 ? (baseData.belowGP / baseData.sales) * 100 : 0,
        laborRatio: baseData.sales > 0 ? (baseData.labor / baseData.sales) * 100 : 0,
        electricityRatio: baseData.sales > 0 ? (baseData.electricity / baseData.sales) * 100 : 0,
        adminRatio: baseData.sales > 0 ? (baseData.admin / baseData.sales) * 100 : 0,
        pricePerKg: baseData.salesVolume > 0 ? baseData.sales / baseData.salesVolume : 0,
        revenuePerTon: baseData.salesVolume > 0 ? baseData.sales / (baseData.salesVolume / 1000) : 0,
        materialCostPerTon: baseData.salesVolume > 0 ? baseData.material / (baseData.salesVolume / 1000) : 0,
        grossProfitPerTon: baseData.salesVolume > 0 ? baseData.grossProfit / (baseData.salesVolume / 1000) : 0,
        mfgCostPerTon: baseData.salesVolume > 0 ? baseData.mfgExpenses / (baseData.salesVolume / 1000) : 0,
        marginOverMaterial: baseData.material > 0 ? ((baseData.sales - baseData.material) / baseData.material) * 100 : 0,
        totalCosts: totalCosts,
        totalCostRatio: baseData.sales > 0 ? (totalCosts / baseData.sales) * 100 : 0,
      };

      const calcCAGR = (current, prev1, prev2, years) => {
        if (!prev1 || !prev2 || years < 2) return 0;
        return (((current / prev2) ** (1 / years)) - 1) * 100;
      };
      const prevYear1 = prevPeriodsData.find(p => p.year === basePeriod.year - 1);
      const prevYear2 = prevPeriodsData.find(p => p.year === basePeriod.year - 2);
      const salesCAGR = calcCAGR(baseData.sales, prevYear1?.sales, prevYear2?.sales, 2);
      const grossMarginCAGR = calcCAGR(metrics.grossMargin, prevYear1 ? (prevYear1.grossProfit / prevYear1.sales) * 100 : 0, prevYear2 ? (prevYear2.grossProfit / prevYear2.sales) * 100 : 0, 2);

      const prevYearData = prevYear1;
      const yoySalesChange = prevYearData && prevYearData.sales > 0 ? ((baseData.sales - prevYearData.sales) / prevYearData.sales) * 100 : 0;
      const yoyGrossMarginChange = prevYearData && prevYearData.grossProfit > 0 ? ((metrics.grossMargin - (prevYearData.grossProfit / prevYearData.sales) * 100) / (prevYearData.grossProfit / prevYearData.sales) * 100) : 0;
      const yoyNetMarginChange = prevYearData && prevYearData.netProfit > 0 ? ((metrics.netMargin - (prevYearData.netProfit / prevYearData.sales) * 100) / (prevYearData.netProfit / prevYearData.sales) * 100) : 0;
      const yoyMfgCostChange = prevYearData && prevYearData.mfgExpenses > 0 ? ((metrics.mfgCostPerTon - (prevYearData.mfgExpenses / (prevYearData.salesVolume / 1000))) / (prevYearData.mfgExpenses / (prevYearData.salesVolume / 1000)) * 100) : 0;

      const norms = industryNorms[division] || { marginOverMaterial: 18, grossProfit: 15, netProfit: 7, ebitda: 12 };

      let aiText = `**COMPREHENSIVE FINANCIAL ANALYSIS: ${basePeriodName}**\n`;
      aiText += `**${divisionNames[division] || division}**\n\n`;

      aiText += `**EXECUTIVE SUMMARY**\n\n`;
      let summaryText = `This analysis evaluates the financial performance of ${basePeriodName}, comparing it to prior periods and industry norms. Key highlights include `;
      if (!userPreferences.excludeTrends) {
        summaryText += `a ${yoySalesChange > 0 ? `+${yoySalesChange.toFixed(1)}%` : `${yoySalesChange.toFixed(1)}%`} change in sales (CAGR ${salesCAGR.toFixed(1)}% over 3 years), `;
        summaryText += `a gross margin of ${metrics.grossMargin.toFixed(1)}% (${yoyGrossMarginChange > 0 ? `+${yoyGrossMarginChange.toFixed(1)}%` : `${yoyGrossMarginChange.toFixed(1)}%`} YoY, CAGR ${grossMarginCAGR.toFixed(1)}%), `;
        summaryText += `and a net margin of ${metrics.netMargin.toFixed(1)}% (${yoyNetMarginChange > 0 ? `+${yoyNetMarginChange.toFixed(1)}%` : `${yoyNetMarginChange.toFixed(1)}%`} YoY). `;
      } else {
        summaryText += `a gross margin of ${metrics.grossMargin.toFixed(1)}% and a net margin of ${metrics.netMargin.toFixed(1)}%. `;
      }
      summaryText += `Challenges in cost control and profitability are evident${userPreferences.excludeStrategy ? '.' : ', with strategic recommendations provided.'}\n\n`;
      aiText += summaryText;

      aiText += `**REVENUE & VOLUME ANALYSIS**\n`;
      aiText += `• Total Revenue: ${(baseData.sales / 1000000).toFixed(2)}M\n`;
      let salesVolumeText = `• Sales Volume: ${(baseData.salesVolume / 1000).toFixed(1)} k tons`;
      if (!userPreferences.excludeTrends) {
        salesVolumeText += ` (${yoySalesChange > 0 ? `+${yoySalesChange.toFixed(1)}%` : `${yoySalesChange.toFixed(1)}%`} YoY)`;
      }
      aiText += `${salesVolumeText}\n`;
      aiText += `• Average Selling Price: ${metrics.pricePerKg.toFixed(3)}/kg\n`;
      aiText += `• Revenue per Ton: ${(metrics.revenuePerTon / 1000).toFixed(0)}K\n`;
      if (!userPreferences.excludeMarketPositioning) {
        aiText += `• Market Positioning: ${metrics.pricePerKg > 3.0 ? 'Premium pricing' : metrics.pricePerKg > 2.0 ? 'Competitive' : 'Value-focused'}\n`;
      }
      aiText += `\n`;

      aiText += `**PROFITABILITY ANALYSIS**\n`;
      let grossProfitText = `• Gross Profit: ${(baseData.grossProfit / 1000000).toFixed(2)}M (${metrics.grossMargin.toFixed(1)}% margin`;
      if (!userPreferences.excludeTrends) {
        grossProfitText += `, ${yoyGrossMarginChange.toFixed(1)}% YoY`;
      }
      grossProfitText += `)\n`;
      aiText += grossProfitText;
      aiText += `• EBITDA: ${(baseData.ebitda / 1000000).toFixed(2)}M (${metrics.ebitdaMargin.toFixed(1)}% margin)\n`;
      let netProfitText = `• Net Profit: ${(baseData.netProfit / 1000000).toFixed(2)}M (${metrics.netMargin.toFixed(1)}% margin`;
      if (!userPreferences.excludeTrends) {
        netProfitText += `, ${yoyNetMarginChange.toFixed(1)}% YoY`;
      }
      netProfitText += `)\n`;
      aiText += netProfitText;
      aiText += `• Gross Profit per Ton: ${(metrics.grossProfitPerTon / 1000).toFixed(0)}K\n`;
      if (!userPreferences.excludeIndustryBenchmarks) {
        aiText += `• Industry Comparison: Gross margin ${metrics.grossMargin > norms.grossProfit ? 'above' : metrics.grossMargin > norms.grossProfit * 0.9 ? 'near' : 'below'} ${norms.grossProfit}%, Net margin ${metrics.netMargin > norms.netProfit ? 'above' : metrics.netMargin > norms.netProfit * 0.9 ? 'near' : 'below'} ${norms.netProfit}%\n`;
      }
      if (userPreferences.focusOnMargins) {
        aiText += `• Margin Efficiency: ${metrics.grossMargin > 20 ? 'Excellent' : metrics.grossMargin > 15 ? 'Good' : 'Poor'}\n`;
        if (!userPreferences.excludeTrends) {
          aiText += `• Profitability Trend: ${metrics.netMargin > 8 ? 'Strong' : metrics.netMargin > 4 ? 'Moderate' : 'Weak'}\n`;
        }
      }
      aiText += `\n`;

      aiText += `**COST STRUCTURE BREAKDOWN**\n`;
      aiText += `• Material Costs: ${(baseData.material / 1000000).toFixed(2)}M (${metrics.materialRatio.toFixed(1)}% of sales)\n`;
      let mfgExpensesText = `• Manufacturing Expenses: ${(baseData.mfgExpenses / 1000000).toFixed(2)}M (${metrics.mfgRatio.toFixed(1)}% of sales`;
      if (!userPreferences.excludeTrends) {
        mfgExpensesText += `, ${yoyMfgCostChange.toFixed(1)}% YoY`;
      }
      mfgExpensesText += `)\n`;
      aiText += mfgExpensesText;
      aiText += `• Labor Costs: ${(baseData.labor / 1000000).toFixed(2)}M (${metrics.laborRatio.toFixed(1)}% of sales)\n`;
      aiText += `• Electricity Costs: ${(baseData.electricity / 1000000).toFixed(2)}M (${metrics.electricityRatio.toFixed(1)}% of sales)\n`;
      aiText += `• Admin Costs: ${(baseData.admin / 1000000).toFixed(2)}M (${metrics.adminRatio.toFixed(1)}% of sales)\n`;
      aiText += `• Below Gross Profit Costs: ${(baseData.belowGP / 1000000).toFixed(2)}M (${metrics.belowGPRatio.toFixed(1)}% of sales)\n`;
      aiText += `• Total Operating Costs: ${(metrics.totalCosts / 1000000).toFixed(2)}M (${metrics.totalCostRatio.toFixed(1)}% of sales)\n`;
      aiText += `• Material Cost per Ton: ${(metrics.materialCostPerTon / 1000).toFixed(0)}K\n`;
      if (userPreferences.focusOnCosts) {
        aiText += `• Cost Efficiency: ${metrics.materialRatio < 60 ? 'Excellent' : metrics.materialRatio < 70 ? 'Good' : 'Poor'}\n`;
        if (!userPreferences.excludeTrends) {
          aiText += `• Cost Trend: Total costs increased by ${(metrics.totalCostRatio - (prevYearData ? (prevYearData.material + prevYearData.mfgExpenses + prevYearData.belowGP) / prevYearData.sales * 100 : 0)).toFixed(1)}% YoY\n`;
        }
      }
      aiText += `\n`;

      if (userPreferences.focusOnEfficiency) {
        aiText += `**OPERATIONAL EFFICIENCY ANALYSIS**\n`;
        let efficiencyText = `• Sales Volume: ${(baseData.salesVolume / 1000).toFixed(1)} k tons (${baseData.salesVolume > 50000 ? 'High-scale' : baseData.salesVolume > 20000 ? 'Medium-scale' : 'Focused-scale'})\n`;
        efficiencyText += `• Production Efficiency: ${metrics.mfgRatio < 15 ? 'Excellent' : metrics.mfgRatio < 20 ? 'Good' : 'Poor'}\n`;
        efficiencyText += `• Resource Utilization: ${metrics.materialRatio + metrics.mfgRatio < 75 ? 'Efficient' : 'Inefficient'}\n`;
        if (!userPreferences.excludeTrends) {
          efficiencyText += `• Cost per Ton Trend: ${yoyMfgCostChange.toFixed(1)}% YoY change\n`;
        }
        aiText += efficiencyText;
      }

      if (!userPreferences.excludeStrategy) {
        aiText += `**STRATEGIC RECOMMENDATIONS**\n`;
        aiText += `• Cost Optimization: Reduce material costs by ${metrics.materialRatio > 70 ? '5-10%' : '2-5%'} through supplier negotiations\n`;
        aiText += `• Pricing Strategy: Adjust pricing to improve price per kg by ${metrics.pricePerKg < 2.0 ? '10-15%' : '5%'}\n`;
        aiText += `• Efficiency Improvement: Invest in automation to lower mfg costs by ${metrics.mfgRatio > 20 ? '10%' : '5%'}\n`;
        aiText += `• Profit Recovery: Target a net margin increase to ${norms.netProfit}% through expense control\n`;
      }

      aiText += `\n**SCENARIO ANALYSIS SUGGESTION**\n`;
      aiText += `Use the chat to simulate scenarios (e.g., "What if material costs drop by 5%?") for deeper insights.\n`;

      aiText += `\n**VISUALIZATION SUGGESTION**\n`;
      aiText += `Consider generating a line chart for YoY trends in sales, gross margin, or costs using the canvas panel.\n`;

      const originalText = aiText;
      aiText = applyUserPreferences(aiText);
      aiText = adjustFormat(aiText);

      if (aiText === originalText) {
        setRegenerationFeedback('ℹ️ No changes applied during regeneration. Preferences may already be applied or no matching text found.');
      } else {
        setRegenerationFeedback('✅ Preferences applied successfully during regeneration.');
      }

      setWriteup(aiText);
      setHasAutoGenerated(true);
      setGenerationCount(generationCount + 1);

      setChatMessages(prev => [...prev, {
        type: 'system',
        content: `Analysis regenerated with ${Object.keys(userPreferences).length} learned preferences applied. Highlight any section and use the chat to expand, correct, remove text, set preferences, or simulate scenarios.`,
        timestamp: new Date(),
      }]);

      setCurrentFinancialData(baseData);

    } catch (err) {
      console.error('Error generating writeup:', err);
      setError(`Failed to generate analysis: ${err.message}`);
    } finally {
      setLoading(false);
      clearTimeout(timeoutId);
    }
  }

  // Handle text selection in writeup
  const handleTextSelection = () => {
    const selection = window.getSelection();
    const selectedText = selection.toString().trim();
    if (selectedText.length > 0) {
      setSelectedText(selectedText);
      setShowChat(true);
    }
  };

  // Capture current selection
  const captureSelectedText = () => {
    const selection = window.getSelection();
    const text = selection.toString().trim();
    if (text.length > 0) {
      setSelectedText(text);
      setShowChat(true);
      return text;
    }
    return null;
  };

  // Clear selected text
  const clearSelectedText = () => {
    setSelectedText('');
  };

  // Enhanced chat submit with live updates, preference learning, and chat memory
  const handleChatSubmit = async (e) => {
    e.preventDefault();
    if (!currentPrompt.trim() || chatLoading) return;

    setChatLoading(true);
    setRegenerationFeedback('');
    const userMessage = currentPrompt.trim();

    const newUserMessage = {
      type: 'user',
      content: userMessage,
      context: selectedText,
      timestamp: new Date(),
    };
    setChatMessages(prev => [...prev, newUserMessage]);
    setCurrentPrompt('');

    try {
      const detectedPreferences = detectAndSavePreferences(userMessage);

      const isCorrection = userMessage.toLowerCase().includes('not') || 
                          userMessage.toLowerCase().includes('should be') || 
                          userMessage.toLowerCase().includes('change') || 
                          userMessage.toLowerCase().includes('correct') || 
                          userMessage.toLowerCase().includes('fix') || 
                          userMessage.toLowerCase().includes('replace');
      const isRemove = userMessage.toLowerCase().includes('remove') || 
                       userMessage.toLowerCase().includes('delete');
      const isScenario = userMessage.toLowerCase().includes('what if') || 
                         userMessage.toLowerCase().includes('scenario');
      const isExpand = userMessage.toLowerCase().includes('add') || 
                       userMessage.toLowerCase().includes('expand') || 
                       userMessage.includes('detail') || 
                       userMessage.includes('more');
      const isMemoryRequest = userMessage.toLowerCase().includes('as i mentioned') || 
                              userMessage.toLowerCase().includes('earlier');
      const isRegenerateRequest = userMessage.toLowerCase().includes('apply') || 
                                  userMessage.toLowerCase().includes('reapply') || 
                                  userMessage.toLowerCase().includes('update') || 
                                  userMessage.toLowerCase().includes('regenerate');

      let aiResponseText = '';
      let updatedWriteup = writeup;

      if (isRemove && selectedText) {
        updatedWriteup = replaceInWriteup(selectedText, '');
        aiResponseText = `✅ **REMOVAL APPLIED LIVE**: Removed "${selectedText.length > 50 ? selectedText.substring(0, 50) + '...' : selectedText}" from the write-up.`;
        if (detectedPreferences.length > 0) {
          aiResponseText += `\n\n🧠 **PREFERENCES LEARNED**: This text will be excluded from future write-ups on regeneration.`;
        }
      } else if (detectedPreferences.length > 0) {
        aiResponseText = `🧠 **PREFERENCES LEARNED**: I've saved the following preferences for future analyses:\n${detectedPreferences.map(p => `• ${p}`).join('\n')}\n\nThese will be applied to future write-ups on regeneration.`;
        const preferencesAppliedWriteup = applyUserPreferences(writeup);
        const formattedWriteup = adjustFormat(preferencesAppliedWriteup);
        if (formattedWriteup !== writeup) {
          setWriteup(formattedWriteup);
          if (writeupRef.current) {
            writeupRef.current.innerText = formattedWriteup;
          }
          aiResponseText += '\n\n✅ **APPLIED TO CURRENT ANALYSIS**: Your preferences have been applied live.';
        } else {
          aiResponseText += '\n\nℹ️ **NO CHANGES APPLIED**: The current write-up already aligns with your preferences, or no relevant sections were found to update.';
        }
      } else if (isRegenerateRequest) {
        aiResponseText = '🔄 **REGENERATING ANALYSIS**: Applying latest preferences to regenerate the write-up.';
        await generateDetailedWriteup();
      } else if (isCorrection) {
        const changeMatch = userMessage.match(/(?:change|replace)\s+(.+?)\s+to\s+(.+)/i);
        if (changeMatch) {
          const [, oldText, newText] = changeMatch;
          updatedWriteup = replaceInWriteup(oldText.trim(), newText.trim());
          aiResponseText = `✅ **CORRECTION APPLIED LIVE**: Changed "${oldText.trim()}" to "${newText.trim()}" throughout the analysis.`;
        } else if (userMessage.toLowerCase().includes('k tons') && userMessage.toLowerCase().includes('mt')) {
          updatedWriteup = replaceInWriteup('k tons', 'MT');
          aiResponseText = '✅ **CORRECTION APPLIED LIVE**: Changed all volume units from "k tons" to "MT".';
        } else if (userMessage.toLowerCase().includes('thousand') && userMessage.toLowerCase().includes('million')) {
          updatedWriteup = writeup.replace(/(\d+\.?\d*)\s*M\b/g, (match, number) => `${(parseFloat(number) * 1000).toFixed(0)}K`);
          setWriteup(updatedWriteup);
          if (writeupRef.current) {
            writeupRef.current.innerText = updatedWriteup;
          }
          aiResponseText = '✅ **CORRECTION APPLIED LIVE**: Updated currency units from millions to thousands.';
        } else {
          aiResponseText = '✅ **CORRECTION NOTED**: Please specify using "Change X to Y" or "Replace A with B".';
        }
      } else if (isScenario && currentFinancialData) {
        const scenarioMatch = userMessage.match(/what if\s+(.*?)\s+by\s+([\d.]+%?)/i);
        if (scenarioMatch) {
          const [_, variable, change] = scenarioMatch;
          const changeValue = parseFloat(change) / 100 || 0;
          let scenarioImpact = '';
          switch (variable.toLowerCase()) {
            case 'material costs':
              const newMaterial = currentFinancialData.material * (1 - changeValue);
              const newGrossProfit = currentFinancialData.grossProfit + (currentFinancialData.material - newMaterial);
              const newGrossMargin = currentFinancialData.sales > 0 ? (newGrossProfit / currentFinancialData.sales) * 100 : 0;
              scenarioImpact = `Scenario: Reducing material costs by ${change} increases gross profit to ${(newGrossProfit / 1000000).toFixed(2)}M and gross margin to ${newGrossMargin.toFixed(1)}%.`;
              break;
            case 'mfg costs':
              const newMfg = currentFinancialData.mfgExpenses * (1 - changeValue);
              const newTotalCosts = currentFinancialData.totalCosts - (currentFinancialData.mfgExpenses - newMfg);
              const newNetProfit = currentFinancialData.netProfit + (currentFinancialData.mfgExpenses - newMfg);
              const newNetMargin = currentFinancialData.sales > 0 ? (newNetProfit / currentFinancialData.sales) * 100 : 0;
              scenarioImpact = `Scenario: Reducing mfg costs by ${change} lowers total costs to ${(newTotalCosts / 1000000).toFixed(2)}M and increases net margin to ${newNetMargin.toFixed(1)}%.`;
              break;
            default:
              scenarioImpact = 'Scenario not supported. Try "What if material costs by X%" or "What if mfg costs by X%".';
          }
          aiResponseText = `📊 **SCENARIO ANALYSIS**: ${scenarioImpact}`;
        } else {
          aiResponseText = '📊 **SCENARIO NOTED**: Use format "What if [variable] by [X%]?" (e.g., "What if material costs by 5%?").';
        }
      } else if (isExpand) {
        aiResponseText = await generateExpandedContent(userMessage, selectedText, currentFinancialData);
        const enhancedContent = applyUserPreferences(aiResponseText);
        const formattedContent = adjustFormat(enhancedContent);
        updatedWriteup = writeup + '\n\n' + formattedContent;
        setWriteup(updatedWriteup);
        if (writeupRef.current) {
          writeupRef.current.innerText = updatedWriteup;
        }
        aiResponseText = `✅ **EXPANSION APPLIED LIVE**: Added detailed content to the write-up.`;
      } else if (isMemoryRequest) {
        const pastFocus = chatMessages.find(msg => msg.type === 'user' && msg.content.toLowerCase().includes('focus on'));
        if (pastFocus) {
          aiResponseText = `🧠 **MEMORY RECALL**: As you mentioned earlier ("${pastFocus.content}"), I'll apply that preference. `;
          const recalledPreferences = detectAndSavePreferences(pastFocus.content);
          if (recalledPreferences.length > 0) {
            aiResponseText += `Re-applied preferences: ${recalledPreferences.join(', ')}.`;
            const preferencesAppliedWriteup = applyUserPreferences(writeup);
            const formattedWriteup = adjustFormat(preferencesAppliedWriteup);
            if (formattedWriteup !== writeup) {
              setWriteup(formattedWriteup);
              if (writeupRef.current) {
                writeupRef.current.innerText = formattedWriteup;
              }
              aiResponseText += '\n\n✅ **APPLIED LIVE**: Updated the write-up based on recalled preferences.';
            }
          }
        } else {
          aiResponseText = `🧠 **MEMORY NOTE**: I couldn't find a relevant past request. Please specify your preference again (e.g., "Focus on costs").\n\nNote: All chat interactions are saved to memory automatically. To manage memory (e.g., forget this chat), click the book icon beneath this message and select the chat to forget, or disable memory in the "Data Controls" section of settings.`;
        }
      } else {
        aiResponseText = '💡 **GENERAL RESPONSE**: Please specify to expand, correct, remove, simulate a scenario, recall a past request, or regenerate the write-up (e.g., "Expand on costs", "Remove this text", "What if material costs by 5%?", "As I mentioned earlier...", "Regenerate with current settings").';
      }

      const aiMessage = {
        type: 'assistant',
        content: aiResponseText,
        timestamp: new Date(),
      };
      setChatMessages(prev => [...prev, aiMessage]);

    } catch (err) {
      console.error('Chat error:', err);
      setChatMessages(prev => [...prev, {
        type: 'error',
        content: 'Error processing your request. Please try again.',
        timestamp: new Date(),
      }]);
    } finally {
      setChatLoading(false);
      setSelectedText('');
    }
  };

  // Generate expanded content for the writeup
  const generateExpandedContent = async (prompt, context, financialData) => {
    const data = financialData || {};
    const lowerPrompt = prompt.toLowerCase();

    if (lowerPrompt.includes('margin') || lowerPrompt.includes('profitability')) {
      let expandedText = `**DETAILED MARGIN ANALYSIS**\n\nExpanded profitability insights:\n\n`;
      expandedText += `**Cost Breakdown:**\n`;
      expandedText += `• Material: ${(data.material / 1000000).toFixed(2)}M (${data.sales > 0 ? (data.material / data.sales * 100).toFixed(1) : 'N/A'}% of sales)\n`;
      expandedText += `• Mfg Expenses: ${(data.mfgExpenses / 1000000).toFixed(2)}M (${data.sales > 0 ? (data.mfgExpenses / data.sales * 100).toFixed(1) : 'N/A'}%)\n`;
      expandedText += `• Below GP: ${(data.belowGP / 1000000).toFixed(2)}M (${data.sales > 0 ? (data.belowGP / data.sales * 100).toFixed(1) : 'N/A'}%)\n`;
      
      if (!userPreferences.preferShortFormat) {
        expandedText += `\n**Optimization Opportunities:**\n`;
        expandedText += `• Negotiate supplier contracts for ${data.materialRatio > 70 ? '5-10%' : '2-5%'} cost reduction\n`;
        expandedText += `• Implement lean manufacturing to cut mfg costs by ${data.mfgRatio > 20 ? '10%' : '5%'}\n`;
        expandedText += `• Adjust product mix for higher margins\n`;
      }

      if (userPreferences.preferDetailedFormat) {
        expandedText += `\n**Benchmarking:**\n`;
        expandedText += `• Gross Margin vs ${industryNorms.grossProfit || 15}% industry norm\n`;
        expandedText += `• Net Margin vs ${industryNorms.netProfit || 7}% sector average\n`;
        expandedText += `• EBITDA Margin vs ${industryNorms.ebitda || 12}% standard\n`;
      }
      
      return expandedText;
    }

    if (lowerPrompt.includes('volume') || lowerPrompt.includes('sales')) {
      const volumeMT = data.salesVolume ? (data.salesVolume / 1000).toFixed(1) : 'N/A';
      let expandedText = `**COMPREHENSIVE VOLUME ANALYSIS**\n\nDetailed sales insights:\n\n`;
      expandedText += `**Performance:**\n`;
      expandedText += `• Volume: ${volumeMT} MT\n`;
      expandedText += `• Price per kg: ${data.salesVolume > 0 ? (data.sales / data.salesVolume).toFixed(3) : 'N/A'}\n`;
      expandedText += `• Revenue per MT: ${data.salesVolume > 0 ? ((data.sales / (data.salesVolume / 1000)) / 1000).toFixed(0) : 'N/A'}K\n`;

      if (!userPreferences.preferShortFormat) {
        expandedText += `\n**Growth Strategies:**\n`;
        expandedText += `• Expand into new markets with ${volumeMT > 50000 ? 'high-scale' : 'focused'} capacity\n`;
        expandedText += `• Optimize pricing for ${data.pricePerKg < 2.0 ? '10-15%' : '5%'} increase\n`;
        expandedText += `• Enhance distribution channels\n`;
      }

      if (userPreferences.preferDetailedFormat) {
        expandedText += `\n**Implications:**\n`;
        expandedText += `• Capacity utilization at ${data.salesVolume > 50000 ? 'high' : 'moderate'} levels\n`;
        expandedText += `• Inventory management needs review\n`;
      }
      
      return expandedText;
    }

    if (lowerPrompt.includes('cost') || lowerPrompt.includes('expense')) {
      let expandedText = `**COMPREHENSIVE COST ANALYSIS**\n\nDetailed cost examination:\n\n`;
      expandedText += `**Variable Costs:**\n`;
      expandedText += `• Material per MT: ${(data.salesVolume > 0 ? (data.material / (data.salesVolume / 1000)) / 1000 : 'N/A').toFixed(0)}K\n`;
      expandedText += `• Mfg per MT: ${(data.salesVolume > 0 ? (data.mfgExpenses / (data.salesVolume / 1000)) / 1000 : 'N/A').toFixed(0)}K\n`;

      if (!userPreferences.preferShortFormat) {
        expandedText += `\n**Fixed Costs:**\n`;
        expandedText += `• Labor: ${(data.labor / 1000000).toFixed(2)}M\n`;
        expandedText += `• Admin: ${(data.admin / 1000000).toFixed(2)}M\n`;
      }

      if (userPreferences.preferDetailedFormat) {
        expandedText += `\n**Control Initiatives:**\n`;
        expandedText += `• Negotiate with suppliers for ${data.materialRatio > 70 ? '5-10%' : '2-5%'} savings\n`;
        expandedText += `• Automate processes to reduce labor by ${data.laborRatio > 5 ? '5%' : '2%'}\n`;
        expandedText += `• Audit energy usage for ${data.electricityRatio > 3 ? '5%' : '2%'} efficiency\n`;
      }
      
      return expandedText;
    }

    if (lowerPrompt.includes('growth') || lowerPrompt.includes('strategy')) {
      let expandedText = `**STRATEGIC GROWTH ANALYSIS**\n\nGrowth framework:\n\n`;
      expandedText += `**Market Expansion:**\n`;
      expandedText += `• Target new regions with ${data.salesVolume > 50000 ? 'high' : 'moderate'} volume\n`;
      expandedText += `• Diversify product lines\n`;

      if (!userPreferences.preferShortFormat) {
        expandedText += `\n**Operational Excellence:**\n`;
        expandedText += `• Improve mfg efficiency by ${data.mfgRatio > 20 ? '10%' : '5%'}\n`;
        expandedText += `• Optimize supply chain\n`;
      }

      if (userPreferences.preferDetailedFormat) {
        expandedText += `\n**Financial Enhancement:**\n`;
        expandedText += `• Reduce costs by ${data.totalCostRatio > 85 ? '10%' : '5%'}\n`;
        expandedText += `• Reinvest ${(data.ebitda / 1000000).toFixed(2)}M EBITDA\n`;
      }
      
      return expandedText;
    }

    return `**ADDITIONAL ANALYSIS**\n\nInsights for "${prompt}":\n\n**Assessment:**\n• Metrics indicate ${data.sales > 0 ? 'active' : 'limited'} operations\n• Efficiency needs ${data.mfgRatio > 20 ? 'improvement' : 'monitoring'}\n\n**Recommendations:**\n• Optimize costs by ${data.totalCostRatio > 85 ? '10%' : '5%'}\n• Expand volume with ${data.salesVolume > 50000 ? 'high' : 'moderate'} capacity\n\n**Next Steps:**\n• Simulate scenarios via chat (e.g., "What if mfg costs by 5%?")\n• Generate charts for trends`;
  };

  // Reset writeup when period or division changes
  useEffect(() => {
    setWriteup('');
    setHasAutoGenerated(false);
    setGenerationCount(0);
    setError(null);
    setChatMessages([]);
    setCurrentFinancialData(null);
    setRegenerationFeedback('');
  }, [periodKey, division]);

  // Update writeup when preferences change
  useEffect(() => {
    if (hasAutoGenerated && writeup) {
      console.log('Preferences updated, reapplying to current writeup:', userPreferences);
      const updatedWriteup = applyUserPreferences(writeup);
      const formattedWriteup = adjustFormat(updatedWriteup);
      if (formattedWriteup !== writeup) {
        setWriteup(formattedWriteup);
        if (writeupRef.current) {
          writeupRef.current.innerText = formattedWriteup;
        }
        setRegenerationFeedback('✅ Preferences applied to current write-up due to preference change.');
      }
    }
  }, [userPreferences, hasAutoGenerated]);

  // Split writeup into summary and bullet points
  const [summary, ...bullets] = writeup.split(/\n• /);
  const bulletPoints = bullets.map((b, i) => (b.trim().startsWith('•') ? b.trim().slice(1) : b.trim()));

  // Handle contentEditable changes
  const handleDivEdit = (e) => {
    setWriteup(e.currentTarget.innerText);
    setEditing(true);
  };
  const handleDivBlur = async (e) => {
    setEditing(false);
  };

  // Update the display formatting function
  const formatWriteupForDisplay = (text) => {
    if (!text) return null;
    
    // Enhanced text processing for better formatting
    const processedText = text
      // Convert **TITLE** to proper headings
      .replace(/\*\*([A-Z\s:]+)\*\*/g, '<h3 style="font-size: 18px; font-weight: 700; color: #1f2937; margin: 20px 0 12px 0; border-bottom: 2px solid #e5e7eb; padding-bottom: 8px;">$1</h3>')
      // Convert **Regular Bold** to bold text
      .replace(/\*\*([^*]+)\*\*/g, '<strong style="font-weight: 600; color: #374151;">$1</strong>')
      // Handle bullet points with better spacing
      .replace(/\n• /g, '<br/>• ')
      // Add proper spacing between sections
      .replace(/\n\n/g, '<br/><br/>')
      .replace(/\n/g, '<br/>');
    
    const paragraphs = processedText.split('\n\n').filter(p => p.trim() !== '');
    
    return paragraphs.map((para, pIdx) => {
      // Handle sections with bullet points
      if (para.includes('<li style=')) {
        const lines = para.split('\n');
        const heading = lines[0];
        const items = lines.slice(1).filter(line => line.includes('<li style='));
        
        return (
          <div key={pIdx} style={{ marginBottom: 24 }}>
            <div dangerouslySetInnerHTML={{ __html: heading }} />
            <ul style={{ 
              margin: '8px 0 0 0', 
              paddingLeft: 20,
              listStyleType: 'disc',
              color: '#4b5563'
            }}>
              {items.map((item, iIdx) => (
                <div key={`${pIdx}-${iIdx}`} dangerouslySetInnerHTML={{ __html: item }} />
              ))}
            </ul>
          </div>
        );
      } else {
        // Regular paragraphs
        return (
          <div 
            key={pIdx} 
            style={{ 
              marginBottom: 16,
              lineHeight: 1.6,
              color: '#374151',
              fontSize: '15px'
            }} 
            dangerouslySetInnerHTML={{ __html: para }} 
          />
        );
      }
    });
  };

  return (
    <div className="ai-writeup-container" style={{ display: 'flex', gap: 24, marginTop: 40 }}>
      {/* Main Writeup Panel */}
      <div className="ai-writeup-content" style={{
        flex: 2,
        background: '#fff',
        borderRadius: 8,
        boxShadow: '0 2px 10px rgba(0,0,0,0.05)',
        padding: 24,
        textAlign: 'left',
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 16 }}>
          <div>
            <h2 style={{ fontSize: 24, fontWeight: 700, marginBottom: 8, fontFamily: 'Segoe UI, Roboto, Arial, sans-serif' }}>Financial Analysis Write-up</h2>
            <div style={{ fontSize: 18, fontWeight: 500, color: '#288cfa', fontFamily: 'Segoe UI, Roboto, Arial, sans-serif' }}>
              {divisionNames[division] || division}
            </div>
          </div>
          <div style={{ display: 'flex', gap: 8 }}>
            <button
              onClick={() => setShowPreferences(!showPreferences)}
              style={{
                background: showPreferences ? '#fbbf24' : '#374151',
                color: '#fff',
                border: 'none',
                borderRadius: 4,
                padding: '8px 16px',
                fontWeight: 600,
                cursor: 'pointer',
                fontSize: 14
              }}
            >
              {showPreferences ? 'Hide Preferences' : `Preferences (${Object.keys(userPreferences).length})`}
            </button>
            <button
              onClick={() => setShowChat(!showChat)}
              style={{
                background: showChat ? '#22c55e' : '#6b7280',
                color: '#fff',
                border: 'none',
                borderRadius: 4,
                padding: '8px 16px',
                fontWeight: 600,
                cursor: 'pointer'
              }}
            >
              {showChat ? 'Hide Chat' : 'Show Chat'}
            </button>
          </div>
        </div>
        
        {error && <div style={{ color: 'red', marginBottom: 8 }}>{error}</div>}
        {regenerationFeedback && (
          <div style={{ 
            color: regenerationFeedback.startsWith('✅') ? '#10b981' : '#f59e0b', 
            marginBottom: 8 
          }}>
            {regenerationFeedback}
          </div>
        )}
        
        <div style={{
          background: '#f0f9ff',
          border: '1px solid #0ea5e9',
          borderRadius: 6,
          padding: 12,
          marginBottom: 16,
          fontSize: 14
        }}>
          <strong>📝 How to Use the AI Writing Assistant:</strong>
          <div style={{ marginTop: 8 }}>
            <div>1. <strong>Generate Analysis:</strong> Click "Generate Analysis" to create your writeup</div>
            <div>2. <strong>Select Text:</strong> Highlight any part of the analysis to discuss</div>
            <div>3. <strong>Open Chat:</strong> Click "Show Chat" (opens automatically with selection)</div>
            <div>4. <strong>Ask AI:</strong> Expand, correct, remove text, set preferences, or simulate scenarios</div>
            <div style={{ marginTop: 6, paddingLeft: 16, fontSize: 13, color: '#0369a1' }}>
              💡 <strong>Tip:</strong> Selected text appears in a blue box in the chat!
            </div>
          </div>
        </div>
        
        <div
          ref={writeupRef}
          contentEditable
          suppressContentEditableWarning
          onMouseUp={handleTextSelection}
          onInput={(e) => setWriteup(e.currentTarget.innerText)}
          className="ai-writeup-contenteditable"
          style={{
            width: '100%',
            fontSize: 15,
            fontFamily: 'Segoe UI, Roboto, Arial, sans-serif',
            borderRadius: 6,
            border: '1px solid #e5e7eb',
            padding: 20,
            minHeight: 450,
            background: '#fafbfc',
            outline: 'none',
            lineHeight: 1.6,
            marginBottom: 12,
            boxSizing: 'border-box',
            userSelect: 'text',
            color: '#374151'
          }}
          spellCheck={true}
        >
          {writeup ? (
            <div dangerouslySetInnerHTML={{ 
              __html: writeup
                // Convert **TITLE** to proper headings
                .replace(/\*\*([A-Z\s:]+)\*\*/g, '<h3 style="font-size: 18px; font-weight: 700; color: #1f2937; margin: 16px 0 8px 0; border-bottom: 1px solid #e5e7eb; padding-bottom: 4px;">$1</h3>')
                // Convert **Regular Bold** to bold text  
                .replace(/\*\*([^*]+)\*\*/g, '<strong style="font-weight: 600; color: #374151;">$1</strong>')
                // Convert bullet points
                .replace(/\n• /g, '<br/>• ')
                // Convert line breaks
                .replace(/\n\n/g, '<br/><br/>')
                .replace(/\n/g, '<br/>')
            }} />
          ) : (
            <div style={{ color: '#9ca3af', fontStyle: 'italic' }}>
              Click "Generate Analysis" to create a comprehensive financial analysis. Use the chat to expand, correct, remove text, simulate scenarios, or recall past requests.
            </div>
          )}
        </div>
        
        <div style={{ display: 'flex', justifyContent: 'flex-end', gap: 12 }}>
          <button
            onClick={() => {
              const text = captureSelectedText();
              if (!text) {
                alert('Please select some text in the writeup above first.');
              }
            }}
            style={{
              background: '#6366f1',
              color: '#fff',
              border: 'none',
              borderRadius: 4,
              padding: '8px 16px',
              fontWeight: 600,
              fontSize: 14,
              cursor: 'pointer'
            }}
          >
            📌 Capture Selected Text
          </button>
          <button
            onClick={generateDetailedWriteup}
            disabled={loading}
            style={{
              background: '#288cfa',
              color: '#fff',
              border: 'none',
              borderRadius: 4,
              padding: '10px 24px',
              fontWeight: 600,
              fontSize: 16,
              cursor: loading ? 'not-allowed' : 'pointer',
              opacity: loading ? 0.7 : 1
            }}
          >
            {loading ? 'Generating...' : 'Generate Analysis'}
          </button>
        </div>
      </div>

      {/* Chat Interface */}
      {showChat && (
        <div style={{
          flex: 1,
          background: '#fff',
          borderRadius: 8,
          boxShadow: '0 2px 10px rgba(0,0,0,0.05)',
          padding: 16,
          display: 'flex',
          flexDirection: 'column',
          maxHeight: '600px'
        }}>
          <h3 style={{ margin: '0 0 16px 0', fontSize: 18, fontWeight: 600, color: '#374151' }}>
            AI Writing Assistant
          </h3>
          
          {selectedText && (
            <div style={{
              background: '#eff6ff',
              border: '1px solid #bfdbfe',
              borderRadius: 4,
              padding: 8,
              marginBottom: 12,
              fontSize: 14,
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'flex-start'
            }}>
              <div style={{ flex: 1 }}>
                <strong>📌 Selected Text:</strong><br/>
                <span style={{ fontStyle: 'italic', color: '#1e40af' }}>
                  "{selectedText.length > 150 ? selectedText.substring(0, 150) + '...' : selectedText}"
                </span>
                <div style={{ fontSize: 12, marginTop: 4, color: '#64748b' }}>
                  💬 Expand, correct, remove, simulate scenarios, or recall past requests
                </div>
              </div>
              <button
                onClick={clearSelectedText}
                style={{
                  background: '#dc2626',
                  color: '#fff',
                  border: 'none',
                  borderRadius: 3,
                  padding: '4px 8px',
                  fontSize: 11,
                  cursor: 'pointer',
                  marginLeft: 8
                }}
              >
                Clear
              </button>
            </div>
          )}
          
          {!selectedText && (
            <div style={{
              background: '#f8fafc',
              border: '1px solid #e2e8f0',
              borderRadius: 4,
              padding: 8,
              marginBottom: 12,
              fontSize: 13,
              color: '#64748b',
              textAlign: 'center'
            }}>
              💡 Select text above or type a request below
            </div>
          )}
          
          <div style={{
            flex: 1,
            overflowY: 'auto',
            marginBottom: 12,
            minHeight: 200,
            maxHeight: 300
          }}>
            {chatMessages.map((message, index) => (
              <div
                key={index}
                style={{
                  marginBottom: 12,
                  padding: 8,
                  borderRadius: 4,
                  background: message.type === 'user' ? '#dbeafe' : message.type === 'error' ? '#fee2e2' : '#f3f4f6',
                  border: `1px solid ${message.type === 'user' ? '#93c5fd' : message.type === 'error' ? '#fca5a5' : '#d1d5db'}`
                }}
              >
                <div style={{ fontSize: 12, color: '#6b7280', marginBottom: 4 }}>
                  {message.type === 'user' ? 'You' : message.type === 'error' ? 'Error' : 'AI Assistant'} - {message.timestamp.toLocaleString()}
                </div>
                <div style={{ fontSize: 14, whiteSpace: 'pre-wrap' }}>
                  {message.content}
                </div>
              </div>
            ))}
            {chatLoading && (
              <div style={{ padding: 8, color: '#6b7280', fontSize: 14 }}>
                AI is thinking...
              </div>
            )}
          </div>
          
          <form onSubmit={handleChatSubmit} style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>
            <textarea
              ref={chatInputRef}
              value={currentPrompt}
              onChange={(e) => setCurrentPrompt(e.target.value)}
              placeholder="Expand (e.g., 'Expand on costs'), correct (e.g., 'Change X to Y'), remove (e.g., 'Remove this text'), set preferences (e.g., 'Focus on margins'), simulate (e.g., 'What if mfg costs by 5%?')..."
              style={{
                resize: 'none',
                padding: 8,
                border: '1px solid #ccc',
                borderRadius: 4,
                fontSize: 14,
                minHeight: 60,
                outline: 'none'
              }}
              disabled={chatLoading}
            />
            <button
              type="submit"
              disabled={chatLoading || !currentPrompt.trim()}
              style={{
                background: '#10b981',
                color: '#fff',
                border: 'none',
                borderRadius: 4,
                padding: '8px 16px',
                fontWeight: 600,
                cursor: chatLoading || !currentPrompt.trim() ? 'not-allowed' : 'pointer',
                opacity: chatLoading || !currentPrompt.trim() ? 0.7 : 1
              }}
            >
              {chatLoading ? 'Processing...' : 'Send'}
            </button>
          </form>
          
          <div style={{ fontSize: 12, color: '#6b7280', marginTop: 8 }}>
            💡 <strong>Expansion:</strong> "Expand on profitability"<br/>
            🧠 <strong>Preferences:</strong> "Focus on costs", "Use MT"<br/>
            ✏️ <strong>Corrections:</strong> "Change X to Y"<br/>
            🗑️ <strong>Remove:</strong> "Remove this text"<br/>
            📊 <strong>Scenarios:</strong> "What if material costs by 5%?"<br/>
            🧠 <strong>Memory:</strong> "As I mentioned earlier..."
          </div>
        </div>
      )}

      {/* Preferences Panel */}
      {showPreferences && (
        <div style={{
          background: '#f9fafb',
          border: '1px solid #e5e7eb',
          borderRadius: 8,
          padding: 16,
          marginBottom: 16
        }}>
          <h3 style={{ margin: '0 0 12px 0', fontSize: 18, fontWeight: 600, color: '#374151' }}>
            🧠 Learned Preferences for {divisionNames[division] || division}
          </h3>
          
          {Object.keys(userPreferences).length === 0 ? (
            <p style={{ color: '#6b7280', fontStyle: 'italic', margin: 0 }}>
              No preferences learned yet. Use the chat to teach preferences (e.g., "Focus on costs", "Remove this text").
            </p>
          ) : (
            <div>
              <div style={{ marginBottom: 12 }}>
                <strong>Current Preferences:</strong>
              </div>
              <div style={{ display: 'grid', gap: 8 }}>
                {Object.entries(userPreferences).map(([key, value]) => {
                  if (!value) return null;
                  const getPreferenceDescription = (prefKey, prefValue) => {
                    const descriptions = {
                      excludeMarketPositioning: '🚫 Exclude market positioning',
                      excludeIndustryBenchmarks: '🚫 Exclude industry benchmarks',
                      excludeStrategy: '🚫 Exclude strategic recommendations',
                      excludeGrowth: '🚫 Exclude growth analysis',
                      excludeTrends: '🚫 Exclude trend and YoY comparisons',
                      focusOnCosts: '🎯 Focus on cost analysis',
                      focusOnMargins: '🎯 Focus on margin analysis',
                      focusOnEfficiency: '🎯 Focus on operational efficiency',
                      preferShortFormat: '📝 Prefer short format',
                      preferDetailedFormat: '📝 Prefer detailed format',
                      preferMT: '📏 Use MT units',
                      preferThousands: '💰 Use thousands (K)',
                      excludedText: `🗑️ Exclude specific text: ${prefValue.map(t => `"${t.length > 50 ? t.substring(0, 50) + '...' : t}"`).join(', ')}`,
                    };
                    return descriptions[prefKey] || prefKey;
                  };
                  return (
                    <div key={key} style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      background: '#fff',
                      padding: '8px 12px',
                      borderRadius: 4,
                      border: '1px solid #d1d5db'
                    }}>
                      <span style={{ fontSize: 14 }}>{getPreferenceDescription(key, value)}</span>
                      <button
                        onClick={() => {
                          const newPreferences = { ...userPreferences };
                          delete newPreferences[key];
                          setUserPreferences(newPreferences);
                        }}
                        style={{
                          background: '#ef4444',
                          color: '#fff',
                          border: 'none',
                          borderRadius: 3,
                          padding: '4px 8px',
                          fontSize: 12,
                          cursor: 'pointer'
                        }}
                      >
                        Remove
                      </button>
                    </div>
                  );
                })}
              </div>
              <div style={{ marginTop: 12, paddingTop: 12, borderTop: '1px solid #e5e7eb' }}>
                <button
                  onClick={() => {
                    setUserPreferences({});
                    localStorage.removeItem(`aiWriteupPreferences_${division}`);
                  }}
                  style={{
                    background: '#dc2626',
                    color: '#fff',
                    border: 'none',
                    borderRadius: 4,
                    padding: '6px 12px',
                    fontSize: 12,
                    cursor: 'pointer',
                    marginRight: 8
                  }}
                >
                  Clear All Preferences
                </button>
                <span style={{ fontSize: 12, color: '#6b7280' }}>
                  Preferences persist across sessions
                </span>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default AIWriteupPanel;